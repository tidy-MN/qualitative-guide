[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Topics",
    "section": "",
    "text": "1 — Overview of R packages\n\n\n\n\n\n\n\nsetup\n\n\npackages\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2024\n\n\n\n\n\n\n  \n\n\n\n\n2 — Count words\n\n\n\n\n\n\n\ncount\n\n\nwords\n\n\nterms\n\n\ntokens\n\n\n\n\n\n\n\n\n\n\n\nJan 2, 2024\n\n\n\n\n\n\n  \n\n\n\n\n3 — Group and code responses\n\n\n\n\n\n\n\ncode\n\n\ngroup\n\n\nthemes\n\n\n\n\n\n\n\n\n\n\n\nJan 3, 2024\n\n\n\n\n\n\n  \n\n\n\n\n4 — Discover groups: Topic modeling\n\n\n\n\n\n\n\nfind\n\n\ngroups\n\n\ntopics\n\n\nmodel\n\n\n\n\n\n\n\n\n\n\n\nJan 4, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Illustrations by Alison Hill and Allison Horst, for RStudio.\n\n\nThis guide is actively being developed and welcomes your input. To request a new topic or suggest edits submit a New issue on the development page. You can also post a question specific to your data to the Requests for assistnace channel in the R users Team."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2. Group responses/index.html",
    "href": "posts/2. Group responses/index.html",
    "title": "Group responses",
    "section": "",
    "text": "Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/1. Count words/index.html",
    "href": "posts/1. Count words/index.html",
    "title": "1. Count words",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/1_count_words/index.html",
    "href": "posts/1_count_words/index.html",
    "title": "1 — Count words",
    "section": "",
    "text": "library(tidyverse)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')"
  },
  {
    "objectID": "posts/2_group_responses/index.html",
    "href": "posts/2_group_responses/index.html",
    "title": "2 — Group responses",
    "section": "",
    "text": "Welcome!"
  },
  {
    "objectID": "posts/1_count_words/index.html#load-the-data",
    "href": "posts/1_count_words/index.html#load-the-data",
    "title": "1 — Count words",
    "section": "",
    "text": "library(tidyverse)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')"
  },
  {
    "objectID": "posts/1_count_words/index.html#count-totals-of-each-type",
    "href": "posts/1_count_words/index.html#count-totals-of-each-type",
    "title": "1 — Count words",
    "section": "Count totals of each type",
    "text": "Count totals of each type\n\nlibrary(tidyverse)\nlibrary(kableExtra)\n\ntype_count &lt;- tv_ratings %&gt;%\n              count(type)\n\ntype_count\n\n# A tibble: 2 × 2\n  type        n\n  &lt;chr&gt;   &lt;int&gt;\n1 Movie    5377\n2 TV Show  2410"
  },
  {
    "objectID": "posts/1_count_words/index.html#count-totals-of-each-type-by-release_year",
    "href": "posts/1_count_words/index.html#count-totals-of-each-type-by-release_year",
    "title": "1 — Count words",
    "section": "Count totals of each type by release_year",
    "text": "Count totals of each type by release_year\n\nyear_type_count &lt;- tv_ratings %&gt;%\n                      count(release_year, type)\n\nyear_type_count %&gt;% head()\n\n# A tibble: 6 × 3\n  release_year type        n\n         &lt;dbl&gt; &lt;chr&gt;   &lt;int&gt;\n1         1925 TV Show     1\n2         1942 Movie       2\n3         1943 Movie       3\n4         1944 Movie       3\n5         1945 Movie       3\n6         1946 Movie       1"
  },
  {
    "objectID": "posts/0_example_data/index.html",
    "href": "posts/0_example_data/index.html",
    "title": "_Example data",
    "section": "",
    "text": "#| cache: true\n\nlibrary(tidyverse)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')\n\nglimpse(tv_ratings)"
  },
  {
    "objectID": "posts/0_example_data/index.html#get-the-tv-rating-data",
    "href": "posts/0_example_data/index.html#get-the-tv-rating-data",
    "title": "_Example data",
    "section": "",
    "text": "#| cache: true\n\nlibrary(tidyverse)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')\n\nglimpse(tv_ratings)"
  },
  {
    "objectID": "posts/0_example_data/index.html#view-the-first-few-descriptions",
    "href": "posts/0_example_data/index.html#view-the-first-few-descriptions",
    "title": "_Example data",
    "section": "View the first few descriptions",
    "text": "View the first few descriptions\nlibrary(DT)\n\ndatatable(tv_ratings %&gt;% head(15), options = list(pageLength = 5))"
  },
  {
    "objectID": "posts/1_count_words/index.html#show-results-in-a-wide-table",
    "href": "posts/1_count_words/index.html#show-results-in-a-wide-table",
    "title": "1 — Count words",
    "section": "Show results in a wide table",
    "text": "Show results in a wide table\n\nlibrary(janitor)\n\ntabyl(tv_ratings, release_year, type) %&gt;%\n  filter(release_year &lt; 1980) %&gt;%\n  adorn_totals() %&gt;%\n  knitr::kable()\n\n\n\n\nrelease_year\nMovie\nTV Show\n\n\n\n\n1925\n0\n1\n\n\n1942\n2\n0\n\n\n1943\n3\n0\n\n\n1944\n3\n0\n\n\n1945\n3\n0\n\n\n1946\n1\n1\n\n\n1947\n1\n0\n\n\n1954\n2\n0\n\n\n1955\n3\n0\n\n\n1956\n2\n0\n\n\n1958\n3\n0\n\n\n1959\n1\n0\n\n\n1960\n4\n0\n\n\n1962\n3\n0\n\n\n1963\n1\n1\n\n\n1964\n1\n0\n\n\n1965\n2\n0\n\n\n1966\n1\n0\n\n\n1967\n4\n1\n\n\n1968\n4\n1\n\n\n1969\n2\n0\n\n\n1970\n2\n0\n\n\n1971\n5\n0\n\n\n1972\n3\n1\n\n\n1973\n10\n0\n\n\n1974\n6\n1\n\n\n1975\n6\n0\n\n\n1976\n9\n0\n\n\n1977\n6\n1\n\n\n1978\n6\n0\n\n\n1979\n10\n1\n\n\nTotal\n109\n9"
  },
  {
    "objectID": "posts/1_count_words/index.html#results-in-a-wide-table-with-totals",
    "href": "posts/1_count_words/index.html#results-in-a-wide-table-with-totals",
    "title": "1 — Count words",
    "section": "Results in a wide table with totals",
    "text": "Results in a wide table with totals\n\nlibrary(janitor)\n\ntv_ratings %&gt;%\n  tabyl(release_year, type) %&gt;%\n  filter(release_year &lt; 1960) %&gt;%\n  adorn_totals() %&gt;%\n  knitr::kable()\n\n\n\n\nrelease_year\nMovie\nTV Show\n\n\n\n\n1925\n0\n1\n\n\n1942\n2\n0\n\n\n1943\n3\n0\n\n\n1944\n3\n0\n\n\n1945\n3\n0\n\n\n1946\n1\n1\n\n\n1947\n1\n0\n\n\n1954\n2\n0\n\n\n1955\n3\n0\n\n\n1956\n2\n0\n\n\n1958\n3\n0\n\n\n1959\n1\n0\n\n\nTotal\n24\n2"
  },
  {
    "objectID": "posts/1_count_words/index.html#rank-occurence-of-words",
    "href": "posts/1_count_words/index.html#rank-occurence-of-words",
    "title": "1 — Count words",
    "section": "Rank occurence of words",
    "text": "Rank occurence of words\n\ntokens = words or phrases\n\nTop 10 words in the show’s genre description.\n\nlibrary(tidytext)\n\nword_count &lt;- tv_ratings %&gt;%\n              unnest_tokens(word, listed_in) %&gt;%\n              count(word) %&gt;%\n              arrange(-n) %&gt;%\n              head(10)\n\nword_count\n\n# A tibble: 10 × 2\n   word              n\n   &lt;chr&gt;         &lt;int&gt;\n 1 movies         4989\n 2 tv             4972\n 3 international  3636\n 4 dramas         2810\n 5 shows          2612\n 6 comedies       1996\n 7 action          871\n 8 adventure       871\n 9 romantic        864\n10 documentaries   786"
  },
  {
    "objectID": "posts/1_count_words/index.html#exclude-stop-words-unwanted-words",
    "href": "posts/1_count_words/index.html#exclude-stop-words-unwanted-words",
    "title": "1 — Count words",
    "section": "Exclude stop words / unwanted words",
    "text": "Exclude stop words / unwanted words\n\nstop words = Common words or phrases that don’t provide value\n\n\nword_count &lt;- tv_ratings %&gt;%\n              unnest_tokens(word, listed_in) %&gt;%\n              count(word) %&gt;%\n              arrange(-n) %&gt;%\n              head(10)\n\nword_count\n\n# A tibble: 10 × 2\n   word              n\n   &lt;chr&gt;         &lt;int&gt;\n 1 movies         4989\n 2 tv             4972\n 3 international  3636\n 4 dramas         2810\n 5 shows          2612\n 6 comedies       1996\n 7 action          871\n 8 adventure       871\n 9 romantic        864\n10 documentaries   786"
  },
  {
    "objectID": "posts/0_package_overview/index.html",
    "href": "posts/0_package_overview/index.html",
    "title": "Package overview",
    "section": "",
    "text": "R comes installed with many built-in functions and tools to help do your work.\nOn top of this foundation, often referred to as base R, contributors have created tools that can make R easier to use and perform new tasks. These add-ons are called packages. These are made available to everyone to download for free."
  },
  {
    "objectID": "posts/0_package_overview/index.html#recommended-packages",
    "href": "posts/0_package_overview/index.html#recommended-packages",
    "title": "Package overview",
    "section": "",
    "text": "General toolbox\n\ntidyverse The tidyverse is an umbrella of helpful packages. One of the packages it includes is the readr package, which helps import data into R from different formats.\nThe 4 core tidyverse packages:\nreadr Load and save data into and out of R. dplyr Clean, transform, and summarize data. ggplot2 Plot, chart, and graph data.\nlubridate Working with dates, times, and time zones.\nSee the full list of tidyverse packages at https://www.tidyverse.org/packages/\n\nLoad data\n\nreadxl Load data from Excel\njanitor Clean and simplify column names\nDBI Load data from databases\nhaven Load SAS, SPSS, and Stata files\n\n\nManipulate data\n\ndplyr Essential shortcuts to subset, summarize, rearrange, and join data sets.\ntidyr Reshape tables and unpack multiple inputs stored in single cell.\nstringr Tools to edit and clean text and character strings.\nlubridate Tools to format dates and perform calculations based on time.\n\n\nCharts and visuals\n\nggplot2 Essential package for plots and charts.\n\n\nMaps\n\nleaflet Display spatial data and make interactive maps.\nsf Simple features for GIS and maps, a spatial format using data frames to perform spatial analysis.\n\n\nGeneral\n\nremotes Install packages directly from online sources like GitHub and Gitlab.\n\n\n\nTo use a package you first need to install it – much like a free App for your phone. To get a jump start on the workshop, you can copy the text below and paste it into the RStudio console. The console is found on the left-side of the screen when you open RStudio.\n\nnew_packages &lt;- c(\"tidyverse\", \"readxl\", \"janitor\", \"curl\")\n\ninstall.packages(new_packages)\n\n\n\nThen press ENTER to begin the installation. If all goes well, you should start to see some messages appear similar to this, which provide information on the installation progress.\n\n\nDid it work? Try running the code below to load the readr package from your library and see if it is installed.\n\nlibrary(readr)"
  },
  {
    "objectID": "posts/0_package_overview/index.html#additional-recommended-packages",
    "href": "posts/0_package_overview/index.html#additional-recommended-packages",
    "title": "Package overview",
    "section": "Additional recommended packages",
    "text": "Additional recommended packages\n\nCharts and visuals\n\nggsave Export charts in various formats and sizes.\nhrbrthemes, ggthemes Chart themes for ggplot.\nviridis, wesanderson, ghibli Color palettes.\nrmarkdown Write summary reports and save as PDF, Word document, presentation, or website.\n\n\nLoad data\n\nsf Load data from GIS shapefiles. RODBC Load data from Oracle databases.\nRMySQL, RPostgresSQL, and RSQLite for connecting to SQL databases.\npdftools Read PDF documents.\nhaven Load data from SPSS, Stata and SAS. foreign Load data from Minitab and Systat.\nR.matlab Load data from Matlab.\n\n\nManipulate data\n\nstringr Tools to edit and clean text and character strings.\n\n\nMaps\n\ntidycensus Download Census and American Community Survey data.\nleaflet Display spatial data and make interactive maps. \n\nGeneral\n\nremotes Install packages directly from online sources like GitHub and Gitlab."
  },
  {
    "objectID": "posts/0_package_overview/index.html#install-r-packages",
    "href": "posts/0_package_overview/index.html#install-r-packages",
    "title": "Package overview",
    "section": "",
    "text": "R comes installed with many built-in functions and tools to help do your work.\nOn top of this foundation, often referred to as base R, contributors have created tools that can make R easier to use and perform new tasks. These add-ons are called packages. These are made available to everyone to download for free."
  },
  {
    "objectID": "posts/0_package_overview/index.html#packages-used-for-qualitative-analysis",
    "href": "posts/0_package_overview/index.html#packages-used-for-qualitative-analysis",
    "title": "Package overview",
    "section": "Packages used for qualitative analysis",
    "text": "Packages used for qualitative analysis\n\nGeneral toolbox\n\ntidyverse The tidyverse is an umbrella of helpful packages. One of the packages it includes is the readr package, which helps import data into R from different formats.\nThe core tidyverse packages:\nreadr Load and save data stored as plain text, such as Comma Separated Values (CSVs). dplyr Clean, filter, transform, summarize and join data sets. ggplot2 Plot, chart, and graph data.\nSee the full list of tidyverse packages at https://www.tidyverse.org/packages/\n\n\nLoad data\n\nreadxl Load data from Excel\nDBI Load data from databases with SQL\nhaven Load SAS, SPSS, and Stata files\njanitor Clean and simplify column names and remove duplicates\n\n\nAnalyze text data\n\nstringr Tools to edit and clean text and character strings.\nlubridate Tools to format dates and perform calculations based on time. tidytext Tools to count words and phrases and exclude stop words.\n\n\nCharts and visuals\n\nggplot2 Essential package for plots and charts.\n\n\nAdd R packages\nTo use a package you first need to install it – much like a free App for your phone. To get a jump start on the workshop, you can copy the text below and paste it into the RStudio console. The console is found on the left-side of the screen when you open RStudio.\n\nnew_packages &lt;- c(\"tidyverse\", \"readxl\", \"janitor\", \"curl\")\n\ninstall.packages(new_packages)\n\n\n\nThen press ENTER to begin the installation. If all goes well, you should start to see some messages appear similar to this, which provide information on the installation progress.\n\n\nDid it work? Try running the code below to load the readr package from your library and see if it is installed.\n\nlibrary(readr)"
  },
  {
    "objectID": "posts/2_count_words/index.html",
    "href": "posts/2_count_words/index.html",
    "title": "2 — Count words",
    "section": "",
    "text": "Read in a table of kids TV shows on Netflix.\n\nlibrary(tidyverse)\n\ntv_shows &lt;- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/kids_netflix_shows.csv')"
  },
  {
    "objectID": "posts/2_count_words/index.html#load-the-data",
    "href": "posts/2_count_words/index.html#load-the-data",
    "title": "2 — Count words",
    "section": "",
    "text": "library(tidyverse)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv') %&gt;%\n              rename(genre = listed_in)"
  },
  {
    "objectID": "posts/2_count_words/index.html#count-totals-of-each-type",
    "href": "posts/2_count_words/index.html#count-totals-of-each-type",
    "title": "2 — Count words",
    "section": "Count totals of each type",
    "text": "Count totals of each type\n\nlibrary(tidyverse)\nlibrary(kableExtra)\n\ntype_count &lt;- tv_ratings %&gt;%\n              count(type)\n\ntype_count\n\n# A tibble: 2 × 2\n  type        n\n  &lt;chr&gt;   &lt;int&gt;\n1 Movie    5377\n2 TV Show  2410"
  },
  {
    "objectID": "posts/2_count_words/index.html#count-totals-of-each-type-by-release_year",
    "href": "posts/2_count_words/index.html#count-totals-of-each-type-by-release_year",
    "title": "2 — Count words",
    "section": "Count totals of each type by release_year",
    "text": "Count totals of each type by release_year\n\nyear_type_count &lt;- tv_ratings %&gt;%\n                      count(release_year, type)\n\nyear_type_count %&gt;% head()\n\n# A tibble: 6 × 3\n  release_year type        n\n         &lt;dbl&gt; &lt;chr&gt;   &lt;int&gt;\n1         1925 TV Show     1\n2         1942 Movie       2\n3         1943 Movie       3\n4         1944 Movie       3\n5         1945 Movie       3\n6         1946 Movie       1"
  },
  {
    "objectID": "posts/2_count_words/index.html#results-in-a-wide-table-with-totals",
    "href": "posts/2_count_words/index.html#results-in-a-wide-table-with-totals",
    "title": "2 — Count words",
    "section": "Results in a wide table with totals",
    "text": "Results in a wide table with totals\n\nlibrary(janitor)\n\ntv_ratings %&gt;%\n  tabyl(release_year, type) %&gt;%\n  filter(release_year &lt; 1960) %&gt;%\n  adorn_totals() %&gt;%\n  knitr::kable()\n\n\n\n\nrelease_year\nMovie\nTV Show\n\n\n\n\n1925\n0\n1\n\n\n1942\n2\n0\n\n\n1943\n3\n0\n\n\n1944\n3\n0\n\n\n1945\n3\n0\n\n\n1946\n1\n1\n\n\n1947\n1\n0\n\n\n1954\n2\n0\n\n\n1955\n3\n0\n\n\n1956\n2\n0\n\n\n1958\n3\n0\n\n\n1959\n1\n0\n\n\nTotal\n24\n2"
  },
  {
    "objectID": "posts/2_count_words/index.html#rank-occurence-of-words",
    "href": "posts/2_count_words/index.html#rank-occurence-of-words",
    "title": "2 — Count words",
    "section": "Rank occurence of words",
    "text": "Rank occurence of words\n\ntokens = words or phrases\n\nTop 10 words in the genre column.\n\nlibrary(tidytext)\n\ngenre_count &lt;- tv_shows %&gt;%\n               unnest_tokens(word, genre) %&gt;%\n               count(word, sort = TRUE)\n\ngenre_count %&gt;% head(10)\n\n# A tibble: 10 × 2\n   word          n\n   &lt;chr&gt;     &lt;int&gt;\n 1 tv          650\n 2 movies      602\n 3 children    532\n 4 family      532\n 5 kids        414\n 6 comedies    342\n 7 dramas       86\n 8 shows        61\n 9 action       43\n10 adventure    43"
  },
  {
    "objectID": "posts/2_count_words/index.html#exclude-stop-words-unwanted-words",
    "href": "posts/2_count_words/index.html#exclude-stop-words-unwanted-words",
    "title": "2 — Count words",
    "section": "Exclude stop words / unwanted words",
    "text": "Exclude stop words / unwanted words\n\nstop words = Common words or phrases you don’t want to include, such as the, a, and of.\n\nView the full default list of stop words.\n\nexcluded &lt;- get_stopwords()\n\n\nword_count &lt;- tv_ratings %&gt;%\n              unnest_tokens(word, listed_in) %&gt;%\n              filter(!word %in% excluded) %&gt;%\n              count(word, sort = TRUE) %&gt;%\n              head(10)\n\nword_count\n\n# A tibble: 10 × 2\n   word              n\n   &lt;chr&gt;         &lt;int&gt;\n 1 movies         4989\n 2 tv             4972\n 3 international  3636\n 4 dramas         2810\n 5 shows          2612\n 6 comedies       1996\n 7 action          871\n 8 adventure       871\n 9 romantic        864\n10 documentaries   786"
  },
  {
    "objectID": "posts/1_package_overview/index.html",
    "href": "posts/1_package_overview/index.html",
    "title": "1 — Overview of R packages",
    "section": "",
    "text": "R comes installed with many built-in functions and tools to help do your work.\nOn top of this foundation referred to as base R, contributors create tools to make R easier to use and perform new tasks. These add-ons are called packages. These are made available to everyone to download for free.\n\nNeed R? Follow these installation steps.\nNeed access to data? Submit a Data related service request."
  },
  {
    "objectID": "posts/1_package_overview/index.html#install-r-packages",
    "href": "posts/1_package_overview/index.html#install-r-packages",
    "title": "1 — Overview of R packages",
    "section": "",
    "text": "R comes installed with many built-in functions and tools to help do your work.\nOn top of this foundation referred to as base R, contributors create tools to make R easier to use and perform new tasks. These add-ons are called packages. These are made available to everyone to download for free.\n\nNeed R? Follow these installation steps.\nNeed access to data? Submit a Data related service request."
  },
  {
    "objectID": "posts/1_package_overview/index.html#packages-used-for-qualitative-analysis",
    "href": "posts/1_package_overview/index.html#packages-used-for-qualitative-analysis",
    "title": "1 — Overview of R packages",
    "section": "Packages used for qualitative analysis",
    "text": "Packages used for qualitative analysis\n\nGeneral toolbox\n\n\n\ntidyverse The tidyverse is an umbrella of helpful packages. One of the included packages is the readr package, which helps import data into R from a variety of formats.\n\nThe core tidyverse packages we’ll be using:\n\nreadr Load and save data stored as plain text, such as Comma Separated Values (CSVs).\n\ndplyr Clean, filter, transform, summarize and join data sets.\nstringr Edit, clean, and precisely search through text.\nggplot2 Plot, chart, and graph data.\n\nSee the full list of tidyverse packages at the tidyverse.\n\n\nLoad data\n\nreadxl Load data from Excel.\nDBI Load data from databases with SQL.\nhaven Load SAS, SPSS, and Stata files.\njanitor Clean and simplify column names and remove duplicates.\n\n\nAnalyze text data\n\ntidytext Tools to make text easier to analyze. lubridate Tools to format dates and perform calculations based on time.\n\n\nCharts and visuals\n\nggplot2 Essential package for plots and charts.\n\n\nAdd R packages\nTo use a package you first need to install it – much like an App on your phone. Copy the text below and paste it into the RStudio console. The console is found on the left-side of the screen when you open RStudio.\n\nnew_packages &lt;- c(\"tidyverse\", \"tidytext\", \"janitor\", \"curl\", \"stopwords\")\n\ninstall.packages(new_packages)\n\n\n\nThen press ENTER to begin the installation. You should start to see some messages appear similar to below. These will provide information on the installation progress.\n\n\nDid it work? Try running the code below to load the tidyverse package from your library and see if it is installed.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "posts/1_package_overview/index.html#additional-recommended-packages",
    "href": "posts/1_package_overview/index.html#additional-recommended-packages",
    "title": "1 — Overview of R packages",
    "section": "Additional recommended packages",
    "text": "Additional recommended packages\n\nCharts and visuals\n\nggsave Export charts in various formats and sizes.\nhrbrthemes, ggthemes Chart themes for ggplot.\nviridis, wesanderson, ghibli Color palettes.\nrmarkdown Write summary reports and save as a PDF, Word document, presentation, or a web report.\n\n\nLoad data\n\nsf Load data from GIS shapefiles.\nRODBC Load data from Oracle databases.\nRMySQL, RPostgresSQL, and RSQLite for connecting to SQL databases.\npdftools Read PDF documents.\nforeign Load data from Minitab and Systat.\nR.matlab Load data from Matlab.\n\n\nMaps\n\ntidycensus Download Census and American Community Survey data.\nleaflet Display spatial data and make interactive maps."
  },
  {
    "objectID": "posts/3_group_responses/index.html",
    "href": "posts/3_group_responses/index.html",
    "title": "3 — Group and code responses",
    "section": "",
    "text": "Let’s start simple and assign crayons a color based on their descriptive names. Below is a table of 12 crayons and their names. We want to create a group for each of the primary colors - red, yellow, and blue - and an everything-else group labeled other.\nWe’ll begin by searching for the primary color words in the name column of each of the crayons. If a color word is detected, it will be assigned to the appropriate group.\n\n\n\nlibrary(tidyverse)\n\ncrayons &lt;- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/crayons.csv') \n\ncrayons\n\n# A tibble: 12 × 2\n      id name            \n   &lt;dbl&gt; &lt;chr&gt;           \n 1     1 brick red       \n 2     2 vibrant orange  \n 3     3 warm yellow     \n 4     4 slate green     \n 5     5 indigo blue     \n 6     6 grey black      \n 7     7 plum purple     \n 8     8 beige brown     \n 9     9 denim blue      \n10    10 incredible pink \n11    11 sap green       \n12    12 cloudy off-white\n\n\n\n\n\nWe’ll use case_when() and str_detect() to test if a crayon name contains a given primary color word. If it does, we’ll assign the crayon to that color. If none of the primary color words are detected, the crayon will be assigned to the group other.\n\ncrayons_groups &lt;- crayons %&gt;%\n                  mutate(group = case_when(str_detect(name, \"red\") ~ \"RED\",\n                                           str_detect(name, \"yellow\") ~ \"YELLOW\",\n                                           str_detect(name, \"blue\") ~ \"BLUE\",\n                                           .default = \"other\"))\n\ncrayons_groups %&gt;% head(5)\n\n# A tibble: 5 × 3\n     id name           group \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt; \n1     1 brick red      RED   \n2     2 vibrant orange other \n3     3 warm yellow    YELLOW\n4     4 slate green    other \n5     5 indigo blue    BLUE  \n\n\n\n\n\nThe approach above works well for a small number of groups but it can become cumbersome when you have lots of groups to assign. If we wanted to sort the crayons into many more color groups, a better approach would be to create a table to store our group names and the color word associated with it. Then we can use fuzzyjoin to join the groups table to the crayons table. The end result is the same, but it requires less code and will be much easier to update when we want to add new groups or change the words associated with a group.\nHere’s the same example as above using the new table approach.\n\n\n\nFirst, create a table of our groups with two columns:\n\ngroup The group name\nword The word associated with the group\n\n\nlibrary(tidyverse)\nlibrary(fuzzyjoin)\n\ncolor_groups &lt;- tibble(group = c('RED','YELLOW','BLUE'), \n                       word = c(\"red\", \"yellow\", \"blue\")) \n\n\n\n\nNow we can join our two tables using the name column in the crayons table, and the word column in the color_groups table. The function used to match the crayon name to its group is str_detect, which tests whether a given word occurs anywhere in the crayon’s name.\n\ncrayons_groups &lt;- crayons %&gt;%\n                  fuzzy_left_join(color_groups, \n                                  by = join_by(name == word), \n                                  match_fun = str_detect)\n\ncrayons_groups %&gt;% head()\n\n# A tibble: 6 × 4\n     id name           group  word  \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;  &lt;chr&gt; \n1     1 brick red      RED    red   \n2     2 vibrant orange &lt;NA&gt;   &lt;NA&gt;  \n3     3 warm yellow    YELLOW yellow\n4     4 slate green    &lt;NA&gt;   &lt;NA&gt;  \n5     5 indigo blue    BLUE   blue  \n6     6 grey black     &lt;NA&gt;   &lt;NA&gt;  \n\n\n\n\n\nFinally, we’ll use replace_na() to assign all of the crayons without a color group to the group “other”.\n\ncrayons_groups &lt;- crayons_groups %&gt;%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %&gt;%\n  select(id, name, group) %&gt;%\n  head(10)\n\n# A tibble: 10 × 3\n      id name            group \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; \n 1     1 brick red       RED   \n 2     2 vibrant orange  other \n 3     3 warm yellow     YELLOW\n 4     4 slate green     other \n 5     5 indigo blue     BLUE  \n 6     6 grey black      other \n 7     7 plum purple     other \n 8     8 beige brown     other \n 9     9 denim blue      BLUE  \n10    10 incredible pink RED   \n\n\n\nNow that’s interesting. Why do you think the incredible pink crayon was assigned to the group RED?\n\n\n\n\nIn the example above, the function str_detect() looked for the occurrence of the designated letters anywhere in the crayon name. So the pattern of letters “r-e-d” is detected even if it occurs within another word. In this case, the pattern occurs within the name “incredible pink”. That could be useful in some contexts, but in our current crayon situation, we only want to detect the word “red”.\nTo ensure the color “red” is only detected as a complete word, we can add a special character to the start and end of our search term. Adding the character \\\\b to both sides of “red” will require the letters “r-e-d” to occur as its own word and not as part of a longer word.\nFinally, let’s paste \\\\b to both sides of the color words in the color_groups table and then try our fuzzyjoin one more time.\n\ncolor_groups &lt;- color_groups %&gt;%\n                mutate(word = paste0(\"\\\\b\", word, \"\\\\b\"))\n\n# Join the groups again, but with the added separate word requirement\ncrayons_groups &lt;- crayons %&gt;%\n                  fuzzy_left_join(color_groups, \n                                  by = join_by(name == word), \n                                  match_fun = str_detect)\n\ncrayons_groups %&gt;%\n  select(id, name, group) %&gt;%\n  head(10)\n\n# A tibble: 10 × 3\n      id name            group \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; \n 1     1 brick red       RED   \n 2     2 vibrant orange  &lt;NA&gt;  \n 3     3 warm yellow     YELLOW\n 4     4 slate green     &lt;NA&gt;  \n 5     5 indigo blue     BLUE  \n 6     6 grey black      &lt;NA&gt;  \n 7     7 plum purple     &lt;NA&gt;  \n 8     8 beige brown     &lt;NA&gt;  \n 9     9 denim blue      BLUE  \n10    10 incredible pink &lt;NA&gt;  \n\n\n\nSuccess!\n\n\n\n\nWe can lump the remaining crayons that were not labeled with a primary color into an other group. The replace_na() function is used to replace all of the NA values in a given column. Let’s use it to set the group for the NA crayons to “other”.\n\ncrayons_groups &lt;- crayons_groups %&gt;%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %&gt;%\n  select(id, name, group) %&gt;%\n  head(10)\n\n# A tibble: 10 × 3\n      id name            group \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; \n 1     1 brick red       RED   \n 2     2 vibrant orange  other \n 3     3 warm yellow     YELLOW\n 4     4 slate green     other \n 5     5 indigo blue     BLUE  \n 6     6 grey black      other \n 7     7 plum purple     other \n 8     8 beige brown     other \n 9     9 denim blue      BLUE  \n10    10 incredible pink other"
  },
  {
    "objectID": "posts/2_count_words/index.html#additional-stop-word-options",
    "href": "posts/2_count_words/index.html#additional-stop-word-options",
    "title": "2 — Count words",
    "section": "Additional stop word options",
    "text": "Additional stop word options\n\nExclude more wordsKeep some words\n\n\nFor a given data set there may be additional stop words that provide little insight into the text. For example, the words “tv” and “series” are not very informative if each row in your data is about a TV show.\n\nexclude &lt;- c(stop_words$word,\n             \"tv\",\n             \"series\",\n             \"movie\",\n             \"documentary\")\n\nword_count &lt;- tv_shows %&gt;%\n              unnest_tokens(word, description) %&gt;%\n              filter(!word %in% exclude) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(15)\n\n# A tibble: 15 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 friends      136\n 2 world         92\n 3 save          78\n 4 family        64\n 5 life          64\n 6 adventures    60\n 7 evil          60\n 8 fun           56\n 9 adventure     55\n10 home          51\n11 school        51\n12 team          43\n13 christmas     42\n14 city          40\n15 animated      39\n\n\n\n\nSimilarly, a word that is included in the stop word list may be informative for a particular data set. When this is the case, we want to keep the word by removing it from the exclusion list. For example, we may want to know the number of show descriptions that reference one, two or three characters or objects.\nHere’s how we can keep the words “one”, “two” and “three”.\n\nexclude &lt;- stop_words$word\n\nkeep &lt;- c(\"one\", \"two\", \"three\")\n\nexclude &lt;- exclude[!exclude %in% keep]\n\nword_count &lt;- tv_shows %&gt;%\n              unnest_tokens(word, description) %&gt;%\n              filter(!word %in% exclude) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(15)\n\n# A tibble: 15 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 friends      136\n 2 world         92\n 3 save          78\n 4 family        64\n 5 life          64\n 6 series        62\n 7 adventures    60\n 8 evil          60\n 9 fun           56\n10 adventure     55\n11 home          51\n12 school        51\n13 two           44\n14 team          43\n15 christmas     42\n\n\n\nIt appears \"two\" is the most common number to be referenced."
  },
  {
    "objectID": "posts/2_count_words/index.html#count-totals-in-each-groupcategory",
    "href": "posts/2_count_words/index.html#count-totals-in-each-groupcategory",
    "title": "2 — Count words",
    "section": "Count totals in each group/category",
    "text": "Count totals in each group/category\n\nlibrary(tidyverse)\nlibrary(kableExtra)\n\ntype_count &lt;- tv_ratings %&gt;%\n              count(type) # type can be any column in the data\n\ntype_count\n\n# A tibble: 2 × 2\n  type        n\n  &lt;chr&gt;   &lt;int&gt;\n1 Movie    5377\n2 TV Show  2410"
  },
  {
    "objectID": "posts/2_count_words/index.html#count-totals-by-release-year-for-each-type",
    "href": "posts/2_count_words/index.html#count-totals-by-release-year-for-each-type",
    "title": "2 — Count words",
    "section": "Count totals by release year for each type",
    "text": "Count totals by release year for each type\n\nyear_type_count &lt;- tv_shows %&gt;%\n                   count(release_year, type) # Can add multiple column names\n\nyear_type_count %&gt;% head()\n\n# A tibble: 6 × 3\n  release_year type      n\n         &lt;dbl&gt; &lt;chr&gt; &lt;int&gt;\n1         1954 Movie     1\n2         1968 Movie     1\n3         1971 Movie     1\n4         1973 Movie     1\n5         1977 Movie     1\n6         1978 Movie     1"
  },
  {
    "objectID": "posts/2_count_words/index.html#add-results-to-a-wide-format-table-with-totals",
    "href": "posts/2_count_words/index.html#add-results-to-a-wide-format-table-with-totals",
    "title": "2 — Count words",
    "section": "Add results to a wide format table with totals",
    "text": "Add results to a wide format table with totals\n\nlibrary(janitor)\n\ntv_tabyl &lt;- tv_ratings %&gt;%\n            tabyl(release_year, type) %&gt;%\n            adorn_totals() \n\ntv_tabyl %&gt;% head() \n\n release_year Movie TV Show\n         1925     0       1\n         1942     2       0\n         1943     3       0\n         1944     3       0\n         1945     3       0\n         1946     1       1"
  },
  {
    "objectID": "posts/2_count_words/index.html#exclude-vanilla-stop-words-and-unwanted-words",
    "href": "posts/2_count_words/index.html#exclude-vanilla-stop-words-and-unwanted-words",
    "title": "2 — Count words",
    "section": "Exclude vanilla stop words and unwanted words",
    "text": "Exclude vanilla stop words and unwanted words\n\nstop words = Common words or phrases you don’t want to include, such as the, of, and it.\n\nView the full list of default stop words.\n\nexcluded &lt;- get_stopwords()$word\n\nexcluded %&gt;%\n  head()\n\n[1] \"i\"      \"me\"     \"my\"     \"myself\" \"we\"     \"our\"   \n\n\nExclude the stop words from the count list with filter().\n\nword_count &lt;- tv_ratings %&gt;%\n              unnest_tokens(word, listed_in) %&gt;%\n              filter(!word %in% excluded) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(10)\n\n# A tibble: 10 × 2\n   word              n\n   &lt;chr&gt;         &lt;int&gt;\n 1 movies         4989\n 2 tv             4972\n 3 international  3636\n 4 dramas         2810\n 5 shows          2612\n 6 comedies       1996\n 7 action          871\n 8 adventure       871\n 9 romantic        864\n10 documentaries   786"
  },
  {
    "objectID": "index.html#get-the-tv-rating-data",
    "href": "index.html#get-the-tv-rating-data",
    "title": "_Example data",
    "section": "",
    "text": "#| cache: true\n\nlibrary(tidyverse)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')\n\nglimpse(tv_ratings)"
  },
  {
    "objectID": "index.html#view-the-first-few-descriptions",
    "href": "index.html#view-the-first-few-descriptions",
    "title": "_Example data",
    "section": "View the first few descriptions",
    "text": "View the first few descriptions\nlibrary(DT)\n\ndatatable(tv_ratings %&gt;% head(15), options = list(pageLength = 5))"
  },
  {
    "objectID": "posts/2_count_words/index.html#count-totals-in-each-group-or-category",
    "href": "posts/2_count_words/index.html#count-totals-in-each-group-or-category",
    "title": "2 — Count words",
    "section": "Count totals in each group or category",
    "text": "Count totals in each group or category\n\nlibrary(tidyverse)\n\ntype_count &lt;- tv_shows %&gt;%\n              count(type) # type can be any column in the data\n\ntype_count\n\n# A tibble: 2 × 2\n  type        n\n  &lt;chr&gt;   &lt;int&gt;\n1 Movie     532\n2 TV Show   414"
  },
  {
    "objectID": "posts/3_group_responses/index.html#load-the-data",
    "href": "posts/3_group_responses/index.html#load-the-data",
    "title": "3 — Group and code responses",
    "section": "Load the data",
    "text": "Load the data\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\ncrayons &lt;- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/crayons.csv')"
  },
  {
    "objectID": "posts/2_count_words/index.html#exclude-vanilla-stop-words",
    "href": "posts/2_count_words/index.html#exclude-vanilla-stop-words",
    "title": "2 — Count words",
    "section": "Exclude vanilla stop words",
    "text": "Exclude vanilla stop words\n\nstop words = Common words or phrases you don’t want to include, such as the, of, and to.\n\nCreate a list of the default stop words.\n\nexclude &lt;- stop_words$word\n\nexclude %&gt;% head()\n\n[1] \"a\"         \"a's\"       \"able\"      \"about\"     \"above\"     \"according\"\n\n\nFirst, let’s count the occurrence of all words in the show descriptions.\n\nword_count &lt;- tv_ratings %&gt;%\n              unnest_tokens(word, description) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(10)\n\n# A tibble: 10 × 2\n   word      n\n   &lt;chr&gt; &lt;int&gt;\n 1 a     10152\n 2 the    7226\n 3 to     5701\n 4 and    5629\n 5 of     4731\n 6 in     3920\n 7 his    3020\n 8 with   1976\n 9 her    1884\n10 an     1728\n\n\nNow we’ll exclude the stop words from the list with filter().\n\nword_count &lt;- tv_ratings %&gt;%\n              unnest_tokens(word, description) %&gt;%\n              filter(!word %in% exclude) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(10)\n\n# A tibble: 10 × 2\n   word            n\n   &lt;chr&gt;       &lt;int&gt;\n 1 life          746\n 2 family        497\n 3 world         453\n 4 love          447\n 5 woman         402\n 6 friends       383\n 7 series        358\n 8 documentary   326\n 9 school        290\n10 home          263"
  },
  {
    "objectID": "posts/2_count_words/index.html#additional-token-options",
    "href": "posts/2_count_words/index.html#additional-token-options",
    "title": "2 — Count words",
    "section": "Additional token options",
    "text": "Additional token options\n\nCount 2-word phrasesSplit phrases separated by a comma\n\n\nRather than counting every single word, we may be interested in counting how often words occur together. To do this we use unnest_ngrams() and set the n argument to 2. If an &lt;NA&gt; appears in the count column, it indicates a show that had fewer than two words in the genre column.\n\ngenre_count &lt;- tv_shows %&gt;%\n               unnest_ngrams(word, genre, n = 2) %&gt;%\n               count(word, sort = TRUE) \n\ngenre_count %&gt;% head(10)\n\n# A tibble: 10 × 2\n   word                 n\n   &lt;chr&gt;            &lt;int&gt;\n 1 children family    532\n 2 family movies      532\n 3 kids tv            414\n 4 movies comedies    225\n 5 tv tv              140\n 6 tv comedies        117\n 7 movies dramas       64\n 8 tv shows            61\n 9 action adventure    43\n10 fi fantasy          32\n\n\n\nThe words children and family were the most often to occur together.\n\n\n\nIn this data set multiple genres are separated by a comma, so we can treat each phrase before and after a comma as a single genre or token. To do this we use unnest_regex() and set the pattern argument to \", \". This will split the text wherever the sequence of a comma followed by a space occurs. Now the genres will be counted as they were intended in the data.\n\ngenre_count &lt;- tv_shows %&gt;%\n               unnest_regex(word, genre, pattern = \", \") %&gt;%\n               count(word, sort = TRUE) \n\ngenre_count %&gt;% head(10)\n\n# A tibble: 10 × 2\n   word                         n\n   &lt;chr&gt;                    &lt;int&gt;\n 1 children & family movies   532\n 2 kids' tv                   414\n 3 comedies                   225\n 4 tv comedies                117\n 5 dramas                      75\n 6 british tv shows            27\n 7 music & musicals            27\n 8 korean tv shows             23\n 9 tv action & adventure       22\n10 action & adventure          21"
  },
  {
    "objectID": "posts/3_group_responses/index.html#assign-groups",
    "href": "posts/3_group_responses/index.html#assign-groups",
    "title": "3 — Group and code responses",
    "section": "Assign groups",
    "text": "Assign groups"
  },
  {
    "objectID": "posts/3_group_responses/index.html#parent-and-child-nodes",
    "href": "posts/3_group_responses/index.html#parent-and-child-nodes",
    "title": "3 — Group and code responses",
    "section": "Parent and child nodes",
    "text": "Parent and child nodes"
  },
  {
    "objectID": "posts/2_count_words/index.html#count-totals-in-wide-format-table",
    "href": "posts/2_count_words/index.html#count-totals-in-wide-format-table",
    "title": "2 — Count words",
    "section": "Count totals in wide format table",
    "text": "Count totals in wide format table\n\nlibrary(janitor)\n\ntv_tabyl &lt;- tv_shows %&gt;%\n            tabyl(release_year, type) %&gt;%\n            adorn_totals(\"col\") %&gt;%\n            adorn_totals(\"row\") %&gt;%\n            filter(release_year &gt; 2016)\n\ntv_tabyl  \n\n release_year Movie TV Show Total\n         2017    48      52   100\n         2018    63      65   128\n         2019    72      56   128\n         2020    79      73   152\n         2021     1       4     5\n        Total   532     414   946"
  },
  {
    "objectID": "posts/2_count_words/index.html#stop-words",
    "href": "posts/2_count_words/index.html#stop-words",
    "title": "2 — Count words",
    "section": "Stop words",
    "text": "Stop words\n\nstop words = Common words or phrases such as the, of, and to.\n\nWhen comparing survey responses and narratives, some of the most common words are often the articles, such as the, a, and an, that don’t offer much in terms of signaling the intent or theme of the text. These filler words are commonly referred to as stop words.\nA list of stop words is included in the tidytext package. Let’s load the words and store them in a variable called exclude. Here’s the first few for example, but go ahead and take a look at the full list to get a better understanding of what may be considered a stop word.\n\nexclude &lt;- stop_words$word\n\nexclude %&gt;% head()\n\n[1] \"a\"         \"a's\"       \"able\"      \"about\"     \"above\"     \"according\""
  },
  {
    "objectID": "posts/2_count_words/index.html#excluding-unwanted-words",
    "href": "posts/2_count_words/index.html#excluding-unwanted-words",
    "title": "2 — Count words",
    "section": "Excluding unwanted words",
    "text": "Excluding unwanted words\nFor this example we will focus on the description column. This column contains some free text describing the content of the show.\nFirst, let’s start by counting the occurrence of all words in the descriptions.\n\nword_count &lt;- tv_shows %&gt;%\n              unnest_tokens(word, description) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(15)\n\n# A tibble: 15 × 2\n   word      n\n   &lt;chr&gt; &lt;int&gt;\n 1 the    1048\n 2 a      1020\n 3 and     850\n 4 to      804\n 5 of      509\n 6 in      377\n 7 his     343\n 8 with    272\n 9 her     233\n10 their   224\n11 when    207\n12 on      198\n13 an      184\n14 for     179\n15 from    168\n\n\n\nJust as we expected. Lot’s of stop words.\n\n\nLet’s exclude the stop words from the list with the filter() function. This should give us a much more informative list of words.\n\nword_count &lt;- tv_shows %&gt;%\n              unnest_tokens(word, description) %&gt;%\n              filter(!word %in% exclude) %&gt;%\n              count(word, sort = TRUE) \n\nword_count %&gt;% head(15)\n\n# A tibble: 15 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 friends      136\n 2 world         92\n 3 save          78\n 4 family        64\n 5 life          64\n 6 series        62\n 7 adventures    60\n 8 evil          60\n 9 fun           56\n10 adventure     55\n11 home          51\n12 school        51\n13 team          43\n14 christmas     42\n15 city          40"
  },
  {
    "objectID": "posts/4_topic_model/index.html",
    "href": "posts/4_topic_model/index.html",
    "title": "4 — Discover groups: Topic modeling",
    "section": "",
    "text": "Let the computer sort responses into a designated number of groups or topics. Coming soon…"
  },
  {
    "objectID": "posts/3_group_responses/index.html#assign-groups-parent-and-child-nodes",
    "href": "posts/3_group_responses/index.html#assign-groups-parent-and-child-nodes",
    "title": "3 — Group and code responses",
    "section": "Assign groups: Parent and child nodes",
    "text": "Assign groups: Parent and child nodes\n\nLoad the TV data\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')  %&gt;%\n              rename(genre = listed_in)\n\n\n\nLoad the parent and child node table\n\nnodes &lt;- read_csv(\"https://tidy-mn.github.io/qualitative-guide/posts/data/tv_parent_child_nodes.csv\")\n\n\n\nPrepare the description text\n\nwords &lt;- tv_ratings %&gt;%\n         unnest_tokens(word, description, drop = FALSE)\n\n\n\nJoin the parent/child nodes table\n\ntagged &lt;- left_join(words, nodes, by = join_by(word == child)) %&gt;%\n  left_join(nodes, by = join_by(word == child_plural)) %&gt;%\n  mutate(parent = coalesce(parent.x, parent.y),\n         child = coalesce(child, word),\n         .keep = \"unused\"\n         ) \n\n\ntagged\n\n# A tibble: 187,997 × 15\n   show_id type    title director cast    country date_added release_year rating\n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt; \n 1 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 2 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 3 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 4 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 5 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 6 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 7 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 8 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n 9 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n10 s1      TV Show 3%    &lt;NA&gt;     João M… Brazil  August 14…         2020 TV-MA \n# ℹ 187,987 more rows\n# ℹ 6 more variables: duration &lt;chr&gt;, genre &lt;chr&gt;, description &lt;chr&gt;,\n#   child_plural &lt;chr&gt;, child &lt;chr&gt;, parent &lt;chr&gt;\n\n\n\n\nDrop the…\n\ntagged %&gt;%\n  drop_na(parent) %&gt;%\n  select(-child_plural,\n         -child,\n         child)\n\n# A tibble: 5,259 × 14\n   show_id type    title  director  cast  country date_added release_year rating\n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt; \n 1 s2      Movie   7:19   Jorge Mi… Demi… Mexico  December …         2016 TV-MA \n 2 s4      Movie   9      Shane Ac… Elij… United… November …         2009 PG-13 \n 3 s7      Movie   122    Yasir Al… Amin… Egypt   June 1, 2…         2019 TV-MA \n 4 s8      Movie   187    Kevin Re… Samu… United… November …         1997 R     \n 5 s8      Movie   187    Kevin Re… Samu… United… November …         1997 R     \n 6 s8      Movie   187    Kevin Re… Samu… United… November …         1997 R     \n 7 s11     Movie   1922   Zak Hild… Thom… United… October 2…         2017 TV-MA \n 8 s11     Movie   1922   Zak Hild… Thom… United… October 2…         2017 TV-MA \n 9 s12     TV Show 1983   &lt;NA&gt;      Robe… Poland… November …         2018 TV-MA \n10 s16     Movie   Oct-01 Kunle Af… Sadi… Nigeria September…         2014 TV-14 \n# ℹ 5,249 more rows\n# ℹ 5 more variables: duration &lt;chr&gt;, genre &lt;chr&gt;, description &lt;chr&gt;,\n#   parent &lt;chr&gt;, child &lt;chr&gt;"
  },
  {
    "objectID": "posts/3_group_responses/index.html#crayon-colors",
    "href": "posts/3_group_responses/index.html#crayon-colors",
    "title": "3 — Group and code responses",
    "section": "",
    "text": "Let’s start simple and assign crayons a color based on their descriptive names. Below is a table of 12 crayons and their names. We want to create a group for each of the primary colors - red, yellow, and blue - and an everything-else group labeled other.\nWe’ll begin by searching for the primary color words in the name column of each of the crayons. If a color word is detected, it will be assigned to the appropriate group.\n\n\n\nlibrary(tidyverse)\n\ncrayons &lt;- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/crayons.csv') \n\ncrayons\n\n# A tibble: 12 × 2\n      id name            \n   &lt;dbl&gt; &lt;chr&gt;           \n 1     1 brick red       \n 2     2 vibrant orange  \n 3     3 warm yellow     \n 4     4 slate green     \n 5     5 indigo blue     \n 6     6 grey black      \n 7     7 plum purple     \n 8     8 beige brown     \n 9     9 denim blue      \n10    10 incredible pink \n11    11 sap green       \n12    12 cloudy off-white\n\n\n\n\n\nWe’ll use case_when() and str_detect() to test if a crayon name contains a given primary color word. If it does, we’ll assign the crayon to that color. If none of the primary color words are detected, the crayon will be assigned to the group other.\n\ncrayons_groups &lt;- crayons %&gt;%\n                  mutate(group = case_when(str_detect(name, \"red\") ~ \"RED\",\n                                           str_detect(name, \"yellow\") ~ \"YELLOW\",\n                                           str_detect(name, \"blue\") ~ \"BLUE\",\n                                           .default = \"other\"))\n\ncrayons_groups %&gt;% head(5)\n\n# A tibble: 5 × 3\n     id name           group \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt; \n1     1 brick red      RED   \n2     2 vibrant orange other \n3     3 warm yellow    YELLOW\n4     4 slate green    other \n5     5 indigo blue    BLUE  \n\n\n\n\n\nThe approach above works well for a small number of groups but it can become cumbersome when you have lots of groups to assign. If we wanted to sort the crayons into many more color groups, a better approach would be to create a table to store our group names and the color word associated with it. Then we can use fuzzyjoin to join the groups table to the crayons table. The end result is the same, but it requires less code and will be much easier to update when we want to add new groups or change the words associated with a group.\nHere’s the same example as above using the new table approach.\n\n\n\nFirst, create a table of our groups with two columns:\n\ngroup The group name\nword The word associated with the group\n\n\nlibrary(tidyverse)\nlibrary(fuzzyjoin)\n\ncolor_groups &lt;- tibble(group = c('RED','YELLOW','BLUE'), \n                       word = c(\"red\", \"yellow\", \"blue\")) \n\n\n\n\nNow we can join our two tables using the name column in the crayons table, and the word column in the color_groups table. The function used to match the crayon name to its group is str_detect, which tests whether a given word occurs anywhere in the crayon’s name.\n\ncrayons_groups &lt;- crayons %&gt;%\n                  fuzzy_left_join(color_groups, \n                                  by = join_by(name == word), \n                                  match_fun = str_detect)\n\ncrayons_groups %&gt;% head()\n\n# A tibble: 6 × 4\n     id name           group  word  \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;  &lt;chr&gt; \n1     1 brick red      RED    red   \n2     2 vibrant orange &lt;NA&gt;   &lt;NA&gt;  \n3     3 warm yellow    YELLOW yellow\n4     4 slate green    &lt;NA&gt;   &lt;NA&gt;  \n5     5 indigo blue    BLUE   blue  \n6     6 grey black     &lt;NA&gt;   &lt;NA&gt;  \n\n\n\n\n\nFinally, we’ll use replace_na() to assign all of the crayons without a color group to the group “other”.\n\ncrayons_groups &lt;- crayons_groups %&gt;%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %&gt;%\n  select(id, name, group) %&gt;%\n  head(10)\n\n# A tibble: 10 × 3\n      id name            group \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; \n 1     1 brick red       RED   \n 2     2 vibrant orange  other \n 3     3 warm yellow     YELLOW\n 4     4 slate green     other \n 5     5 indigo blue     BLUE  \n 6     6 grey black      other \n 7     7 plum purple     other \n 8     8 beige brown     other \n 9     9 denim blue      BLUE  \n10    10 incredible pink RED   \n\n\n\nNow that’s interesting. Why do you think the incredible pink crayon was assigned to the group RED?\n\n\n\n\nIn the example above, the function str_detect() looked for the occurrence of the designated letters anywhere in the crayon name. So the pattern of letters “r-e-d” is detected even if it occurs within another word. In this case, the pattern occurs within the name “incredible pink”. That could be useful in some contexts, but in our current crayon situation, we only want to detect the word “red”.\nTo ensure the color “red” is only detected as a complete word, we can add a special character to the start and end of our search term. Adding the character \\\\b to both sides of “red” will require the letters “r-e-d” to occur as its own word and not as part of a longer word.\nFinally, let’s paste \\\\b to both sides of the color words in the color_groups table and then try our fuzzyjoin one more time.\n\ncolor_groups &lt;- color_groups %&gt;%\n                mutate(word = paste0(\"\\\\b\", word, \"\\\\b\"))\n\n# Join the groups again, but with the added separate word requirement\ncrayons_groups &lt;- crayons %&gt;%\n                  fuzzy_left_join(color_groups, \n                                  by = join_by(name == word), \n                                  match_fun = str_detect)\n\ncrayons_groups %&gt;%\n  select(id, name, group) %&gt;%\n  head(10)\n\n# A tibble: 10 × 3\n      id name            group \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; \n 1     1 brick red       RED   \n 2     2 vibrant orange  &lt;NA&gt;  \n 3     3 warm yellow     YELLOW\n 4     4 slate green     &lt;NA&gt;  \n 5     5 indigo blue     BLUE  \n 6     6 grey black      &lt;NA&gt;  \n 7     7 plum purple     &lt;NA&gt;  \n 8     8 beige brown     &lt;NA&gt;  \n 9     9 denim blue      BLUE  \n10    10 incredible pink &lt;NA&gt;  \n\n\n\nSuccess!\n\n\n\n\nWe can lump the remaining crayons that were not labeled with a primary color into an other group. The replace_na() function is used to replace all of the NA values in a given column. Let’s use it to set the group for the NA crayons to “other”.\n\ncrayons_groups &lt;- crayons_groups %&gt;%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %&gt;%\n  select(id, name, group) %&gt;%\n  head(10)\n\n# A tibble: 10 × 3\n      id name            group \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; \n 1     1 brick red       RED   \n 2     2 vibrant orange  other \n 3     3 warm yellow     YELLOW\n 4     4 slate green     other \n 5     5 indigo blue     BLUE  \n 6     6 grey black      other \n 7     7 plum purple     other \n 8     8 beige brown     other \n 9     9 denim blue      BLUE  \n10    10 incredible pink other"
  },
  {
    "objectID": "posts/3_group_responses/index.html#load-the-data-1",
    "href": "posts/3_group_responses/index.html#load-the-data-1",
    "title": "3 — Group and code responses",
    "section": "Load the data",
    "text": "Load the data\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\ntv_ratings &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')  %&gt;%\n              rename(genre = listed_in)"
  },
  {
    "objectID": "posts/3_group_responses/index.html#assign-umbrella-groups-parent-and-child-nodes",
    "href": "posts/3_group_responses/index.html#assign-umbrella-groups-parent-and-child-nodes",
    "title": "3 — Group and code responses",
    "section": "Assign umbrella groups: Parent and child nodes",
    "text": "Assign umbrella groups: Parent and child nodes\nWe want to sort our crayons into primary colors and secondary colors. To do this we’ll need to check a crayon name for multiple words. For example, a crayon will be assigned to the primary color group if any of the following words occur in its name: red, yellow, or blue.\nThe larger umbrella group is sometimes referred to as the parent node, and the individual terms that fall under it are its children nodes. Here’s the table of our color groups in terms of parent and child nodes.\n\ncolor_group_nodes &lt;- tribble(\n  ~parent, ~child,\n  \"primary\",   \"red\",\n  \"primary\",   \"yellow\",\n  \"primary\",   \"blue\",\n  \"secondary\", \"green\",\n  \"secondary\", \"orange\",\n  \"secondary\", \"purple\",\n)"
  },
  {
    "objectID": "posts/3_group_responses/index.html#fuzzy-join-primary-and-secondary",
    "href": "posts/3_group_responses/index.html#fuzzy-join-primary-and-secondary",
    "title": "3 — Group and code responses",
    "section": "Fuzzy join primary and secondary",
    "text": "Fuzzy join primary and secondary\nNow we can repeat our previous fuzzy join steps to assign each of the crayons to primary, secondary, or other.\n\ncolor_group_nodes &lt;- color_group_nodes %&gt;%\n                     mutate(child_word = paste0(\"\\\\b\", child, \"\\\\b\"))\n\n# Join the primary/secondary groups\ncrayons_groups &lt;- crayons %&gt;%\n                  fuzzy_left_join(color_group_nodes, \n                                  by = join_by(name == child_word), \n                                  match_fun = str_detect) %&gt;%\n                  replace_na(list(parent = \"other\"))\n\ncrayons_groups %&gt;%\n  select(id, name, parent, child) %&gt;%\n  head(10)\n\n# A tibble: 10 × 4\n      id name            parent    child \n   &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;     &lt;chr&gt; \n 1     1 brick red       primary   red   \n 2     2 vibrant orange  secondary orange\n 3     3 warm yellow     primary   yellow\n 4     4 slate green     secondary green \n 5     5 indigo blue     primary   blue  \n 6     6 grey black      other     &lt;NA&gt;  \n 7     7 plum purple     secondary purple\n 8     8 beige brown     other     &lt;NA&gt;  \n 9     9 denim blue      primary   blue  \n10    10 incredible pink other     &lt;NA&gt;"
  },
  {
    "objectID": "posts/3_group_responses/index.html#assign-multiple-tags",
    "href": "posts/3_group_responses/index.html#assign-multiple-tags",
    "title": "3 — Group and code responses",
    "section": "Assign multiple tags",
    "text": "Assign multiple tags\nWhen we work with longer pieces of text we may want to assign it multiple groups or tags. For example, the description of a kids’ TV show may be about both dinosaurs and siblings.\nIn this example we will label the shows about people and tag each description with the type of people it references, such as sister, brother, or grandmother.\n\nLoad kids TV data\n\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(fuzzyjoin)\n\ntv_shows &lt;- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/kids_netflix_shows.csv')\n\n\n\nSplit up / unnest every word for easy group joining\n\ntv_shows &lt;- tv_shows %&gt;%\n            unnest_tokens(word, description, drop = FALSE)\n\n\n\nLoad the parent and child node table\nHere we provide an example parent/child node table to tag descriptions with various types of people. We include both the singular and plural version of a term - such as uncle and uncles.\n\ntv_nodes &lt;- read_csv(\"https://tidy-mn.github.io/qualitative-guide/posts/data/people_nodes.csv\")\n\ntv_nodes %&gt;% head()\n\n# A tibble: 6 × 3\n  parent child   child_words \n  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;       \n1 people grandpa grandpa     \n2 people grandpa grandpas    \n3 people grandpa grandfather \n4 people grandpa grandfathers\n5 people grandma grandma     \n6 people grandma grandmas    \n\n\n\n\nJoin the parent/child nodes table to the tv_shows\n\ntv_groups &lt;- tv_shows %&gt;%\n             left_join(tv_nodes, \n                       by = join_by(word == child_words))\n\n# Drop the rows/words with no word matches\ntv_groups &lt;- tv_groups %&gt;%\n             filter(!is.na(parent))\n\n# View word matches\ntv_groups %&gt;%\n  select(title, description, parent, child) %&gt;%\n  arrange(child) %&gt;%\n  head() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\ntitle\ndescription\nparent\nchild\n\n\n\n\nHeidi, bienvenida a casa\nInspired by the classic novel, this telenovela follows Heidi, who leaves her happy life in the mountains behind when her aunt takes her to the big city.\npeople\naunt\n\n\nHotel Transylvania\nWith her dad away, Mavis is so ready for adventure – if strict Aunt Lydia doesn’t stop her first. Set four years before the “Hotel Transylvania” film.\npeople\naunt\n\n\nJudy Moody and the Not Bummer Summer\nIn this family film, never-dull third-grader Judy Moody embarks on a summer adventure with her brother, Stink, and always-up-for-fun Aunt Opal.\npeople\naunt\n\n\nRip Tide\nFollowing an embarrassing viral video, a New York model decides to escape from her suffocating existence by visiting her faraway aunt in Australia.\npeople\naunt\n\n\nA Babysitter’s Guide to Monster Hunting\nRecruited by a secret society of babysitters, a high schooler battles the Boogeyman and his monsters when they nab the boy she’s watching on Halloween.\npeople\nboy\n\n\nA Cinderella Story\nTeen Sam meets the boy of her dreams at a dance before returning to toil in her stepmother’s diner. Can her lost cell phone bring them together?\npeople\nboy"
  },
  {
    "objectID": "posts/3_group_responses/index.html#summarize",
    "href": "posts/3_group_responses/index.html#summarize",
    "title": "3 — Group and code responses",
    "section": "Summarize",
    "text": "Summarize\nTo simplify things, let’s take all of the assigned parent and child tags for each movie and bring them together into a comma separated list.\n\ntv_groups &lt;- tv_groups %&gt;%\n              filter(!is.na(parent)) %&gt;%\n              group_by(show_id, type, title, country, release_year, description) %&gt;%\n              summarize(parent_nodes = paste(parent %&gt;% unique %&gt;% sort, collapse = \", \"),\n                        child_nodes = paste(child %&gt;% unique %&gt;% sort, collapse = \", \"),\n                        .groups = \"drop\")\n  \n# View r\ntv_groups %&gt;%\n  select(title, description, parent_nodes, child_nodes) %&gt;%\n  arrange(-nchar(child_nodes)) %&gt;%\n  head(12) %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\ntitle\ndescription\nparent_nodes\nchild_nodes\n\n\n\n\nSnow Day\nWhen a snow day shuts down the whole town, the Wheeler family cuts loose. Hal makes a play for the most popular girl in his school, 10-year-old Natalie takes on the dreaded snowplow man, and Dad gets into a showdown with a rival meteorologist.\npeople, places\nfamily, girl, man, school, town\n\n\nRiding Faith\nFollowing her father’s death, a young woman struggles to help her mother keep the family ranch afloat while preserving a special bond with her horse.\nevents, people\ndeath, family, mother, woman\n\n\nThe Breadwinner\nA courageous 11-year-old Afghan girl disguises herself as a boy and takes on odd jobs to provide for her family when her father is arrested.\npeople\nboy, family, father, girl\n\n\nLego Friends\nAs a way to make friends, new girl in town Olivia volunteers to work at the Heartlake City World Petacular with four other girls.\npeople, places\ncity, girl, town, world\n\n\nWhat a Girl Wants\nIn search of the father she’s never met, the daughter of a bohemian American woman heads to Europe and finds that her dad is an uptight politician.\npeople\ndaughter, father, woman\n\n\nBalto 2: Wolf Quest\nHalf-dog, half-wolf Balto (voiced by Maurice LaMarche) and his wife proudly put their pups up for adoption to humans, but when nobody takes daughter Aleu because she looks too much like a wolf, she runs away to search for her place in the world.\npeople, places\ndaughter, human, world\n\n\nGod Bless the Broken Road\nAfter a young mother is widowed by war, her faith is tested as she struggles to stay afloat financially and raise her daughter.\nevents, people\ndaughter, mother, war\n\n\nHuntik: Secrets and Seekers\nA high school student searching for his missing father joins a secret group known as the Seekers, who ally with aliens to protect the world from evil.\npeople, places\nfather, school, world\n\n\nYours, Mine and Ours\nWhen a father of eight and a mother of 10 prepare to wed, the couple’s children attempt to sabotage the union in this remake of a 1968 comedy.\npeople\nchild, father, mother\n\n\nPokémon the Series\nAsh and his Pikachu travel to the Alola region with his mother and enroll in the Pokémon school, where they confront the nefarious Team Skull.\npeople, places\nmother, school, team\n\n\nThe Haunted Hathaways\nSingle mom Michelle Hathaway and her daughters find that they share their New Orleans home with the ghosts of single dad Ray Preston and his two sons.\npeople, places\ndaughter, home, son\n\n\nYou Are My Home\nAfter becoming separated from her family, a young girl finds herself in the care of a heartbroken woman who faces her own struggles.\npeople\nfamily, girl, woman"
  },
  {
    "objectID": "posts/3_group_responses/index.html#summarize-1",
    "href": "posts/3_group_responses/index.html#summarize-1",
    "title": "3 — Group and code responses",
    "section": "Summarize",
    "text": "Summarize"
  },
  {
    "objectID": "posts/2_count_words/index.html#load-the-kids-tv-data",
    "href": "posts/2_count_words/index.html#load-the-kids-tv-data",
    "title": "2 — Count words",
    "section": "",
    "text": "Read in a table of kids TV shows on Netflix.\n\nlibrary(tidyverse)\n\ntv_shows &lt;- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/kids_netflix_shows.csv')"
  }
]