{
  "hash": "6b39afb0956e3600030328c78674ea45",
  "result": {
    "markdown": "---\ntitle: \"3 — Group and code responses\"\ndate: \"2024-01-03\"\ndate-modified: last-modified\nimage: \"sort_elmo.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    warning: false\n    message: false\ncategories: [code, group, themes]\n---\n\n\n\n## Crayon colors\n\n<img src=\"crayons.jpg\" style=\"margin-right: 16px; margin-bottom: 2px; margin-left: -20px;\" align=\"left\" width=\"184\" alt=\"A box of 12 Crayola crayons.\" >\n\nLet's start simple and assign crayons a color based on their descriptive names. Below is a table of 12 crayons and their names. We want to create a group for each of the primary colors - `red`, `yellow`, and `blue` - and an everything-else group labeled `other`. \n\nWe'll begin by searching for the primary color words in the name column of each of the crayons. If a color word is *detected*, it will be assigned to the appropriate group. \n\n\n### Load the data\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ncrayons <- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/crayons.csv') \n\ncrayons\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n      id name            \n   <dbl> <chr>           \n 1     1 Brick Red       \n 2     2 Vibrant Orange  \n 3     3 Warm Yellow     \n 4     4 Slate Green     \n 5     5 Indigo Blue     \n 6     6 Grey Black      \n 7     7 Plum Purple     \n 8     8 Beige Brown     \n 9     9 Denim Blue      \n10    10 Grayish Pink    \n11    11 Sap Green       \n12    12 Cloudy Off-White\n```\n:::\n:::\n\n\n\n### Find color words\n\nWe'll use `case_when()` and `str_detect()` to test if a crayon name contains a given primary color word. If it does, we'll assign the crayon to that color. If none of the primary color words are detected, the crayon will be assigned to the group `other`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  mutate(group = case_when(str_detect(name, \"Red\") ~ \"red\",\n                                           str_detect(name, \"Yellow\") ~ \"yellow\",\n                                           str_detect(name, \"Blue\") ~ \"blue\",\n                                           .default = \"other\"))\n\ncrayons_groups\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n      id name             group \n   <dbl> <chr>            <chr> \n 1     1 Brick Red        red   \n 2     2 Vibrant Orange   other \n 3     3 Warm Yellow      yellow\n 4     4 Slate Green      other \n 5     5 Indigo Blue      blue  \n 6     6 Grey Black       other \n 7     7 Plum Purple      other \n 8     8 Beige Brown      other \n 9     9 Denim Blue       blue  \n10    10 Grayish Pink     other \n11    11 Sap Green        other \n12    12 Cloudy Off-White other \n```\n:::\n:::\n\n\n\n### Fuzzy join\n\nThe above approach can become cumbersome with lots of groups to assign. When this is the case, we can use `fuzzyjoin` to assign groups based on values stored in a separate table. Here's the same example using the `fuzzy_left_join` function from the `fuzzyjoin` package.\n\n### Create the group table\n\nFirst, create a table of our groups with two columns:\n\n- `group` The group name\n- `word` The word associated with the group\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(fuzzyjoin)\n\ncolor_groups <- tibble(group = c('red','yellow','blue'), \n                       word = c(\"Red\", \"Yellow\", \"Blue\")) \n```\n:::\n\n\n\n### Join groups with fuzzy_left_join\n\nWe tell the function to join based on the `name` column in the *crayons* table, and the `word` column in the *color_groups* table. The function used to match the crayon name to its group is `str_detect`, which tests whether a given word occurs anywhere in the crayon's name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  fuzzy_left_join(color_groups, \n                                  by = c(\"name\" = \"word\"), \n                                  match_fun = str_detect)\n\ncrayons_groups\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n      id name             group  word  \n   <dbl> <chr>            <chr>  <chr> \n 1     1 Brick Red        red    Red   \n 2     2 Vibrant Orange   <NA>   <NA>  \n 3     3 Warm Yellow      yellow Yellow\n 4     4 Slate Green      <NA>   <NA>  \n 5     5 Indigo Blue      blue   Blue  \n 6     6 Grey Black       <NA>   <NA>  \n 7     7 Plum Purple      <NA>   <NA>  \n 8     8 Beige Brown      <NA>   <NA>  \n 9     9 Denim Blue       blue   Blue  \n10    10 Grayish Pink     <NA>   <NA>  \n11    11 Sap Green        <NA>   <NA>  \n12    12 Cloudy Off-White <NA>   <NA>  \n```\n:::\n:::\n\n\n\n### Set the `NA`'s group to \"other\"\n\nFinally, we'll use `replace_na()` to assign all of the crayons without a color group to the group \"other\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons_groups %>%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %>%\n  select(id, name, group) %>%\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id name           group \n  <dbl> <chr>          <chr> \n1     1 Brick Red      red   \n2     2 Vibrant Orange other \n3     3 Warm Yellow    yellow\n4     4 Slate Green    other \n5     5 Indigo Blue    blue  \n```\n:::\n:::\n\n\n\n## Assign groups: Parent and child nodes\n\n\n### Load the TV data\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_d58a3ed10a609394aecd450bcf034f84'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\n\ntv_ratings <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')  %>%\n              rename(genre = listed_in)\n```\n:::\n\n\n\n### Load the parent and child node table\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes <- read_csv(\"https://tidy-mn.github.io/qualitative-guide/posts/data/tv_parent_child_nodes.csv\")\n```\n:::\n\n\n\n### Prepare the description text\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords <- tv_ratings %>%\n         unnest_tokens(word, description, drop = FALSE)\n```\n:::\n\n\n\n### Join the parent/child nodes table \n\n::: {.cell}\n\n```{.r .cell-code}\ntagged <- left_join(words, nodes, by = join_by(word == child)) %>%\n  left_join(nodes, by = join_by(word == child_plural)) %>%\n  mutate(parent = coalesce(parent.x, parent.y),\n         child = coalesce(child, word),\n         .keep = \"unused\"\n         ) \n\n\ntagged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 187,997 × 15\n   show_id type    title director cast    country date_added release_year rating\n   <chr>   <chr>   <chr> <chr>    <chr>   <chr>   <chr>             <dbl> <chr> \n 1 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 2 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 3 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 4 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 5 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 6 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 7 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 8 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n 9 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n10 s1      TV Show 3%    <NA>     João M… Brazil  August 14…         2020 TV-MA \n# ℹ 187,987 more rows\n# ℹ 6 more variables: duration <chr>, genre <chr>, description <chr>,\n#   child_plural <chr>, child <chr>, parent <chr>\n```\n:::\n:::\n\n\n\n\n### Drop the...\n\n::: {.cell}\n\n```{.r .cell-code}\ntagged %>%\n  drop_na(parent) %>%\n  select(-child_plural,\n         -child,\n         child)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,259 × 14\n   show_id type    title  director  cast  country date_added release_year rating\n   <chr>   <chr>   <chr>  <chr>     <chr> <chr>   <chr>             <dbl> <chr> \n 1 s2      Movie   7:19   Jorge Mi… Demi… Mexico  December …         2016 TV-MA \n 2 s4      Movie   9      Shane Ac… Elij… United… November …         2009 PG-13 \n 3 s7      Movie   122    Yasir Al… Amin… Egypt   June 1, 2…         2019 TV-MA \n 4 s8      Movie   187    Kevin Re… Samu… United… November …         1997 R     \n 5 s8      Movie   187    Kevin Re… Samu… United… November …         1997 R     \n 6 s8      Movie   187    Kevin Re… Samu… United… November …         1997 R     \n 7 s11     Movie   1922   Zak Hild… Thom… United… October 2…         2017 TV-MA \n 8 s11     Movie   1922   Zak Hild… Thom… United… October 2…         2017 TV-MA \n 9 s12     TV Show 1983   <NA>      Robe… Poland… November …         2018 TV-MA \n10 s16     Movie   Oct-01 Kunle Af… Sadi… Nigeria September…         2014 TV-14 \n# ℹ 5,249 more rows\n# ℹ 5 more variables: duration <chr>, genre <chr>, description <chr>,\n#   parent <chr>, child <chr>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}