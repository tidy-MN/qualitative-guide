{
  "hash": "c4310fdd193ebe6676724e58ee547184",
  "result": {
    "markdown": "---\ntitle: \"3 — Group and code responses\"\ndate: \"2024-01-03\"\ndate-modified: last-modified\nimage: \"sort_elmo.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    warning: false\n    message: false\ncategories: [code, group, themes]\n---\n\n\n\n## Crayon colors\n\n<img src=\"crayons.jpg\" style=\"margin-right: 16px; margin-bottom: 2px; margin-left: -20px;\" align=\"left\" width=\"184\" alt=\"A box of 12 Crayola crayons.\" >\n\nLet's start simple and assign crayons a color based on their descriptive names. Below is a table of 12 crayons and their names. We want to create a group for each of the primary colors - `red`, `yellow`, and `blue` - and an everything-else group labeled `other`. \n\nWe'll begin by searching for the primary color words in the name column of each of the crayons. If a color word is *detected*, it will be assigned to the appropriate group. \n\n\n### Load the data\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ncrayons <- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/crayons.csv') \n\ncrayons\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n      id name            \n   <dbl> <chr>           \n 1     1 brick red       \n 2     2 vibrant orange  \n 3     3 warm yellow     \n 4     4 slate green     \n 5     5 indigo blue     \n 6     6 grey black      \n 7     7 plum purple     \n 8     8 beige brown     \n 9     9 denim blue      \n10    10 incredible pink \n11    11 sap green       \n12    12 cloudy off-white\n```\n:::\n:::\n\n\n\n### Find color words\n\nWe'll use `case_when()` and `str_detect()` to test if a crayon name contains a given primary color word. If it does, we'll assign the crayon to that color. If none of the primary color words are detected, the crayon will be assigned to the group `other`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  mutate(group = case_when(str_detect(name, \"red\") ~ \"RED\",\n                                           str_detect(name, \"yellow\") ~ \"YELLOW\",\n                                           str_detect(name, \"blue\") ~ \"BLUE\",\n                                           .default = \"other\"))\n\ncrayons_groups %>% head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id name           group \n  <dbl> <chr>          <chr> \n1     1 brick red      RED   \n2     2 vibrant orange other \n3     3 warm yellow    YELLOW\n4     4 slate green    other \n5     5 indigo blue    BLUE  \n```\n:::\n:::\n\n\n\n### Fuzzy join\n\nThe approach above works well for a small number of groups but it can become cumbersome when you have lots of groups to assign. If we wanted to sort the crayons into many more color groups, a better approach would be to create a table to store our group names and the color word associated with it. Then we can use `fuzzyjoin` to join the groups table to the crayons table. The end result is the same, but it requires less code and will be much easier to update when we want to add new groups or change the words associated with a group.\n\nHere's the same example as above using the new table approach.\n\n\n### Create the group table\n\nFirst, create a table of our groups with two columns:\n\n- `group` The group name\n- `word` The word associated with the group\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(fuzzyjoin)\n\ncolor_groups <- tibble(group = c('RED','YELLOW','BLUE'), \n                       word = c(\"red\", \"yellow\", \"blue\")) \n```\n:::\n\n\n\n### Join groups with fuzzy_left_join\n\nNow we can join our two tables using the `name` column in the *crayons* table, and the `word` column in the *color_groups* table. The function used to match the crayon name to its group is `str_detect`, which tests whether a given word occurs anywhere in the crayon's name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  fuzzy_left_join(color_groups, \n                                  by = join_by(name == word), \n                                  match_fun = str_detect)\n\ncrayons_groups %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n     id name           group  word  \n  <dbl> <chr>          <chr>  <chr> \n1     1 brick red      RED    red   \n2     2 vibrant orange <NA>   <NA>  \n3     3 warm yellow    YELLOW yellow\n4     4 slate green    <NA>   <NA>  \n5     5 indigo blue    BLUE   blue  \n6     6 grey black     <NA>   <NA>  \n```\n:::\n:::\n\n\n\n### Set the `NA`'s group to \"other\"\n\nFinally, we'll use `replace_na()` to assign all of the crayons without a color group to the group \"other\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons_groups %>%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %>%\n  select(id, name, group) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n      id name            group \n   <dbl> <chr>           <chr> \n 1     1 brick red       RED   \n 2     2 vibrant orange  other \n 3     3 warm yellow     YELLOW\n 4     4 slate green     other \n 5     5 indigo blue     BLUE  \n 6     6 grey black      other \n 7     7 plum purple     other \n 8     8 beige brown     other \n 9     9 denim blue      BLUE  \n10    10 incredible pink RED   \n```\n:::\n:::\n\n\n\n> Now that's interesting. Why do you think the **incredible pink** crayon was assigned to the group `RED`?\n\n\n### Finding complete words\n\nIn the example above, the function `str_detect()` looked for the occurrence of the designated letters anywhere in the crayon name. So the pattern of letters \"r-e-d\" is detected even if it occurs within another word. In this case, the pattern occurs within the name \"inc**red**ible pink\". That could be useful in some contexts, but in our current crayon situation, we only want to detect the word \"red\". \n\nTo ensure the color \"red\" is only detected as a complete word, we can add a special character to the start and end of our search term. Adding the character `\\\\b` to both sides of \"red\" will require the letters \"r-e-d\" to occur as its own word and not as part of a longer word.\n\nFinally, let's paste `\\\\b` to both sides of the color words in the *color_groups* table and then try our fuzzyjoin one more time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_groups <- color_groups %>%\n                mutate(word = paste0(\"\\\\b\", word, \"\\\\b\"))\n\n# Join the groups again, but with the added separate word requirement\ncrayons_groups <- crayons %>%\n                  fuzzy_left_join(color_groups, \n                                  by = join_by(name == word), \n                                  match_fun = str_detect)\n\ncrayons_groups %>%\n  select(id, name, group) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n      id name            group \n   <dbl> <chr>           <chr> \n 1     1 brick red       RED   \n 2     2 vibrant orange  <NA>  \n 3     3 warm yellow     YELLOW\n 4     4 slate green     <NA>  \n 5     5 indigo blue     BLUE  \n 6     6 grey black      <NA>  \n 7     7 plum purple     <NA>  \n 8     8 beige brown     <NA>  \n 9     9 denim blue      BLUE  \n10    10 incredible pink <NA>  \n```\n:::\n:::\n\n\n\n> Success!\n\n\n### The **\"other\"** group\n\nWe can lump the remaining crayons that were not labeled with a primary color into an *other* group. The `replace_na()` function is used to replace all of the `NA` values in a given column. Let's use it to set the group for the `NA` crayons to \"other\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons_groups %>%\n                  replace_na(list(group = \"other\"))\n\ncrayons_groups %>%\n  select(id, name, group) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n      id name            group \n   <dbl> <chr>           <chr> \n 1     1 brick red       RED   \n 2     2 vibrant orange  other \n 3     3 warm yellow     YELLOW\n 4     4 slate green     other \n 5     5 indigo blue     BLUE  \n 6     6 grey black      other \n 7     7 plum purple     other \n 8     8 beige brown     other \n 9     9 denim blue      BLUE  \n10    10 incredible pink other \n```\n:::\n:::\n\n\n## Assign umbrella groups: Parent and child nodes\n\nWe want to sort our crayons into primary colors and secondary colors. To do this we'll need to check a crayon name for multiple words. For example, a crayon will be assigned to the primary color group if any of the following words occur in its name: `red`, `yellow`, or `blue`.\n\nThe larger umbrella group is sometimes referred to as the *parent node*, and the individual terms that fall under it are its *children nodes*. Here's the table of our color groups in terms of parent and child nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_group_nodes <- tribble(\n  ~parent, ~child,\n  \"primary\",   \"red\",\n  \"primary\",   \"yellow\",\n  \"primary\",   \"blue\",\n  \"secondary\", \"green\",\n  \"secondary\", \"orange\",\n  \"secondary\", \"purple\",\n)\n```\n:::\n\n\n\n## Fuzzy join primary and secondary\n\nNow we can repeat our previous fuzzy join steps to assign each of the crayons to `primary`, `secondary`, or `other`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_group_nodes <- color_group_nodes %>%\n                     mutate(child_word = paste0(\"\\\\b\", child, \"\\\\b\"))\n\n# Join the primary/secondary groups\ncrayons_groups <- crayons %>%\n                  fuzzy_left_join(color_group_nodes, \n                                  by = join_by(name == child_word), \n                                  match_fun = str_detect) %>%\n                  replace_na(list(parent = \"other\"))\n\ncrayons_groups %>%\n  select(id, name, parent, child) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n      id name            parent    child \n   <dbl> <chr>           <chr>     <chr> \n 1     1 brick red       primary   red   \n 2     2 vibrant orange  secondary orange\n 3     3 warm yellow     primary   yellow\n 4     4 slate green     secondary green \n 5     5 indigo blue     primary   blue  \n 6     6 grey black      other     <NA>  \n 7     7 plum purple     secondary purple\n 8     8 beige brown     other     <NA>  \n 9     9 denim blue      primary   blue  \n10    10 incredible pink other     <NA>  \n```\n:::\n:::\n\n\n\n\n## Assign multiple tags\n\nWhen we work with longer pieces of text we may want to assign it multiple groups or tags. For example, the description of a kids' TV show may be about both `dinosaurs` and `siblings`. \n\nIn this example we will label the shows about people and tag each description with the type of people it references, such as `sister`, `brother`, or `grandmother`.\n\n### Load kids TV data\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_bb1621161628ed8eb498fc17bebc6ef8'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(fuzzyjoin)\n\ntv_shows <- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/kids_netflix_shows.csv')\n```\n:::\n\n\n\n### Split up / `unnest` every word for easy group joining\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_shows <- tv_shows %>%\n            unnest_tokens(word, description, drop = FALSE)\n```\n:::\n\n\n\n### Load the parent and child node table\n\nHere we provide an example parent/child node table to tag descriptions with various types of people. We include both the singular and plural version of a term - such as *uncle* and *uncles*. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_nodes <- read_csv(\"https://tidy-mn.github.io/qualitative-guide/posts/data/people_nodes.csv\")\n\ntv_nodes %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  parent child   child_words \n  <chr>  <chr>   <chr>       \n1 people grandpa grandpa     \n2 people grandpa grandpas    \n3 people grandpa grandfather \n4 people grandpa grandfathers\n5 people grandma grandma     \n6 people grandma grandmas    \n```\n:::\n:::\n\n\n\n\n### Join the parent/child `nodes` table to the `tv_shows`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_groups <- tv_shows %>%\n             left_join(tv_nodes, \n                       by = join_by(word == child_words))\n\n# Drop the rows/words with no word matches\ntv_groups <- tv_groups %>%\n             filter(!is.na(parent))\n\n# View word matches\ntv_groups %>%\n  select(title, description, parent, child) %>%\n  arrange(child) %>%\n  head() %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|title                                   |description                                                                                                                                              |parent |child |\n|:---------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------|:------|:-----|\n|Heidi, bienvenida a casa                |Inspired by the classic novel, this telenovela follows Heidi, who leaves her happy life in the mountains behind when her aunt takes her to the big city. |people |aunt  |\n|Hotel Transylvania                      |With her dad away, Mavis is so ready for adventure – if strict Aunt Lydia doesn't stop her first. Set four years before the \"Hotel Transylvania\" film.   |people |aunt  |\n|Judy Moody and the Not Bummer Summer    |In this family film, never-dull third-grader Judy Moody embarks on a summer adventure with her brother, Stink, and always-up-for-fun Aunt Opal.          |people |aunt  |\n|Rip Tide                                |Following an embarrassing viral video, a New York model decides to escape from her suffocating existence by visiting her faraway aunt in Australia.      |people |aunt  |\n|A Babysitter's Guide to Monster Hunting |Recruited by a secret society of babysitters, a high schooler battles the Boogeyman and his monsters when they nab the boy she's watching on Halloween.  |people |boy   |\n|A Cinderella Story                      |Teen Sam meets the boy of her dreams at a dance before returning to toil in her stepmother's diner. Can her lost cell phone bring them together?         |people |boy   |\n:::\n:::\n\n\n\n## Summarize\n\nTo simplify things, let's take all of the assigned parent and child tags for each movie and bring them together into a comma separated list.\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_groups <- tv_groups %>%\n              filter(!is.na(parent)) %>%\n              group_by(show_id, type, title, country, release_year, description) %>%\n              summarize(parent_nodes = paste(parent %>% unique %>% sort, collapse = \", \"),\n                        child_nodes = paste(child %>% unique %>% sort, collapse = \", \"),\n                        .groups = \"drop\")\n  \n# View r\ntv_groups %>%\n  select(title, description, parent_nodes, child_nodes) %>%\n  arrange(-nchar(child_nodes)) %>%\n  head(12) %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|title                       |description                                                                                                                                                                                                                                           |parent_nodes   |child_nodes                     |\n|:---------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------|:-------------------------------|\n|Snow Day                    |When a snow day shuts down the whole town, the Wheeler family cuts loose. Hal makes a play for the most popular girl in his school, 10-year-old Natalie takes on the dreaded snowplow man, and Dad gets into a showdown with a rival meteorologist.   |people, places |family, girl, man, school, town |\n|Riding Faith                |Following her father's death, a young woman struggles to help her mother keep the family ranch afloat while preserving a special bond with her horse.                                                                                                 |events, people |death, family, mother, woman    |\n|The Breadwinner             |A courageous 11-year-old Afghan girl disguises herself as a boy and takes on odd jobs to provide for her family when her father is arrested.                                                                                                          |people         |boy, family, father, girl       |\n|Lego Friends                |As a way to make friends, new girl in town Olivia volunteers to work at the Heartlake City World Petacular with four other girls.                                                                                                                     |people, places |city, girl, town, world         |\n|What a Girl Wants           |In search of the father she's never met, the daughter of a bohemian American woman heads to Europe and finds that her dad is an uptight politician.                                                                                                   |people         |daughter, father, woman         |\n|Balto 2: Wolf Quest         |Half-dog, half-wolf Balto (voiced by Maurice LaMarche) and his wife proudly put their pups up for adoption to humans, but when nobody takes daughter Aleu because she looks too much like a wolf, she runs away to search for her place in the world. |people, places |daughter, human, world          |\n|God Bless the Broken Road   |After a young mother is widowed by war, her faith is tested as she struggles to stay afloat financially and raise her daughter.                                                                                                                       |events, people |daughter, mother, war           |\n|Huntik: Secrets and Seekers |A high school student searching for his missing father joins a secret group known as the Seekers, who ally with aliens to protect the world from evil.                                                                                                |people, places |father, school, world           |\n|Yours, Mine and Ours        |When a father of eight and a mother of 10 prepare to wed, the couple's children attempt to sabotage the union in this remake of a 1968 comedy.                                                                                                        |people         |child, father, mother           |\n|Pokémon the Series          |Ash and his Pikachu travel to the Alola region with his mother and enroll in the Pokémon school, where they confront the nefarious Team Skull.                                                                                                        |people, places |mother, school, team            |\n|The Haunted Hathaways       |Single mom Michelle Hathaway and her daughters find that they share their New Orleans home with the ghosts of single dad Ray Preston and his two sons.                                                                                                |people, places |daughter, home, son             |\n|You Are My Home             |After becoming separated from her family, a young girl finds herself in the care of a heartbroken woman who faces her own struggles.                                                                                                                  |people         |family, girl, woman             |\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}