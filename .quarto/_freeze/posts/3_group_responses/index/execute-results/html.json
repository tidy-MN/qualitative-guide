{
  "hash": "1a7fef2b0d0b14e5eed6d6cd394bd900",
  "result": {
    "markdown": "---\ntitle: \"3 — Group and code responses\"\ndate: \"2024-01-03\"\ndate-modified: last-modified\nimage: \"sort_elmo.png\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    warning: false\n    message: false\ncategories: [code, group, themes]\n---\n\n\n\n## Crayon colors\n\n<img src=\"crayons.jpg\" style=\"margin-right: 16px; margin-bottom: 2px; margin-left: -20px;\" align=\"left\" width=\"184\" alt=\"A box of 12 Crayola crayons.\" >\n\nLet's start simple and assign crayons a color based on their descriptive names. Below is a table of 12 crayons and their names. We want to create a group for each of the primary colors - `red`, `yellow`, and `blue` - and an everything-else group labeled `other`. \n\nWe'll begin by searching for the primary color words in the name column of each of the crayons. If a color word is *detected*, it will be assigned to the appropriate group. \n\n\n### Load the data\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\n\n\ncrayons <- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/crayons.csv') \n\ncrayons\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n      id name            \n   <dbl> <chr>           \n 1     1 brick red       \n 2     2 vibrant orange  \n 3     3 warm yellow     \n 4     4 slate green     \n 5     5 indigo blue     \n 6     6 grey black      \n 7     7 plum purple     \n 8     8 beige brown     \n 9     9 denim blue      \n10    10 incredible pink \n11    11 sap green       \n12    12 cloudy off-white\n```\n:::\n:::\n\n\n\n### Find color words\n\nWe'll use `case_when()` and `str_detect()` to test if a crayon name contains a given primary color word. If it does, we'll assign the crayon to that color. If none of the primary color words are detected, the crayon will be assigned to the group `other`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  mutate(group = case_when(str_detect(name, \"red\") ~ \"RED\",\n                                           str_detect(name, \"yellow\") ~ \"YELLOW\",\n                                           str_detect(name, \"blue\") ~ \"BLUE\",\n                                           .default = \"other\"))\n\ncrayons_groups %>% head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id name           group \n  <dbl> <chr>          <chr> \n1     1 brick red      RED   \n2     2 vibrant orange other \n3     3 warm yellow    YELLOW\n4     4 slate green    other \n5     5 indigo blue    BLUE  \n```\n:::\n:::\n\n\n\n### Joining groups and codes\n\nThe approach above works well for a small number of groups, but it can be cumbersome when you have lots of groups to assign. If we wanted to sort the crayons into many more color groups, a better approach would be to create a table to store our group names and the associated color word. \n\nThen we can join the groups table to the crayons table. The end result is the same, but it requires less code and will be much easier to update when we want to add new groups or change the words associated with a group.\n\nHere's the same example as above using the table joining approach.\n\n\n### Create the group table\n\nFirst, create a table of our groups with two columns:\n\n- `color_group` The group's name\n- `word` The word associated with the group\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_groups <- tibble(color_group = c('RED','YELLOW','BLUE'), \n                       word = c(\"red\", \"yellow\", \"blue\")) \n```\n:::\n\n\n\n\n### Split-up (`unnest`) the words in the crayon names for easy joining\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons <- crayons %>%\n           unnest_tokens(word, name, drop = FALSE)\n```\n:::\n\n\n\n### Join groups with `left_join`\n\nNow we can join our two tables using the `word` column in the *crayons* table, and the `word` column in the *color_groups* table. The function used to join the tables together is `left_join`. It has a `by` argument used to set the columns for linking the two tables together. In this case, the tables both share a column named `word` that we want to join by.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  left_join(color_groups, \n                           by = join_by(word == word))\n\ncrayons_groups %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n     id name           word    color_group\n  <dbl> <chr>          <chr>   <chr>      \n1     1 brick red      brick   <NA>       \n2     1 brick red      red     RED        \n3     2 vibrant orange vibrant <NA>       \n4     2 vibrant orange orange  <NA>       \n5     3 warm yellow    warm    <NA>       \n6     3 warm yellow    yellow  YELLOW     \n```\n:::\n:::\n\n\n\n### Summarize\n\nTo reduce this long list of words down to a single row for each crayon, we can use the function `fill()` and `slice_head()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons_groups %>%\n                  group_by(id, name) %>%\n                  fill(color_group, .direction = \"updown\") %>%\n                  slice_head(n = 1) %>%\n                  select(-word)\n\ncrayons_groups %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   id, name [6]\n     id name           color_group\n  <dbl> <chr>          <chr>      \n1     1 brick red      RED        \n2     2 vibrant orange <NA>       \n3     3 warm yellow    YELLOW     \n4     4 slate green    <NA>       \n5     5 indigo blue    BLUE       \n6     6 grey black     <NA>       \n```\n:::\n:::\n\n\n\n### Set `NA`'s group to \"other\"\n\nFinally, to tidy things up we'll use `replace_na()` to assign the crayons without a color group to a group called \"other\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons_groups %>%\n                  replace_na(list(color_group = \"other\"))\n\ncrayons_groups %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n# Groups:   id, name [10]\n      id name            color_group\n   <dbl> <chr>           <chr>      \n 1     1 brick red       RED        \n 2     2 vibrant orange  other      \n 3     3 warm yellow     YELLOW     \n 4     4 slate green     other      \n 5     5 indigo blue     BLUE       \n 6     6 grey black      other      \n 7     7 plum purple     other      \n 8     8 beige brown     other      \n 9     9 denim blue      BLUE       \n10    10 incredible pink other      \n```\n:::\n:::\n\n\n\n> **Success!**\n\n\n\n## Using umbrella groups: Parent and child codes\n\nWe want to sort our crayons into primary colors and secondary colors. To do this we'll need to check a crayon name for multiple words. For example, a crayon will be assigned to the primary color group if any of the following words occur in its name: `red`, `yellow`, or `blue`.\n\nThe larger umbrella group is sometimes referred to as the *parent code*, and the individual terms that fall under it are its *children codes*. Here's the table of our color groups in terms of parent and child codes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_group_codes <- tribble(\n  ~parent, ~child,\n  \"primary\",   \"red\",\n  \"primary\",   \"yellow\",\n  \"primary\",   \"blue\",\n  \"secondary\", \"green\",\n  \"secondary\", \"orange\",\n  \"secondary\", \"purple\",\n)\n```\n:::\n\n\n\n### Join primary and secondary\n\nNow we can repeat our previous fuzzy join steps to assign each of the crayons to the groups: `primary`, `secondary`, or `other`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons %>%\n                  left_join(color_group_codes, \n                            by = join_by(word == child)) \n\ncrayons_groups %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n      id name           word    parent   \n   <dbl> <chr>          <chr>   <chr>    \n 1     1 brick red      brick   <NA>     \n 2     1 brick red      red     primary  \n 3     2 vibrant orange vibrant <NA>     \n 4     2 vibrant orange orange  secondary\n 5     3 warm yellow    warm    <NA>     \n 6     3 warm yellow    yellow  primary  \n 7     4 slate green    slate   <NA>     \n 8     4 slate green    green   secondary\n 9     5 indigo blue    indigo  <NA>     \n10     5 indigo blue    blue    primary  \n```\n:::\n:::\n\n\n\n#### Tidy up\n\nRepeat our clean-up steps with `group_by`, `fill`, `slice_head`, and `replace_na`.\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayons_groups <- crayons_groups %>%\n                  group_by(id, name) %>%\n                  fill(parent, .direction = \"updown\") %>%\n                  slice_head(n = 1) %>%\n                  select(-word) %>%\n                  replace_na(list(parent = \"other\"))\n\ncrayons_groups %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n# Groups:   id, name [10]\n      id name            parent   \n   <dbl> <chr>           <chr>    \n 1     1 brick red       primary  \n 2     2 vibrant orange  secondary\n 3     3 warm yellow     primary  \n 4     4 slate green     secondary\n 5     5 indigo blue     primary  \n 6     6 grey black      other    \n 7     7 plum purple     secondary\n 8     8 beige brown     other    \n 9     9 denim blue      primary  \n10    10 incredible pink other    \n```\n:::\n:::\n\n\n\n\n\n## Assign multiple tags or codes\n\nWhen we work with longer pieces of text we may want to assign a piece of text to multiple groups or tags. For example, the description of a kids' TV show may be about both `dinosaurs` and `sisters`. \n\nIn this example, we will label the shows about people and tag each description with the types of people it references, such as `sister`, `brother`, or `grandmother`.\n\n### Load kids TV data\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_9879496bd3639ea68c5a371907ddcf50'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(fuzzyjoin)\n\ntv_shows <- read_csv('https://tidy-mn.github.io/qualitative-guide/posts/data/kids_netflix_shows.csv')\n```\n:::\n\n\n\n### Split-up (`unnest`) the words for easy joining\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_shows <- tv_shows %>%\n            unnest_tokens(word, description, drop = FALSE)\n```\n:::\n\n\n\n### Load the parent and child node table\n\nHere we provide an example parent/child node table to tag descriptions with various types of people. Both the singular and plural version of each term is included - such as *uncle* and *uncles*. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npeople_codes <- read_csv(\"https://tidy-mn.github.io/qualitative-guide/posts/data/people_nodes.csv\")\n\npeople_codes %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  parent child child_words\n  <chr>  <chr> <chr>      \n1 people aunt  aunt       \n2 people aunt  aunts      \n3 people boy   boy        \n4 people boy   boys       \n5 people child child      \n6 people child children   \n```\n:::\n:::\n\n\n\n\n### Join the parent/child `nodes` table to the `tv_shows`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_groups <- tv_shows %>%\n             left_join(people_codes, \n                       by = join_by(word == child_words))\n\n# Drop the rows/words with no word matches\ntv_groups <- tv_groups %>%\n             filter(!is.na(parent))\n\n# View word matches\ntv_groups %>%\n  select(title, description, parent, child) %>%\n  arrange(child) %>%\n  head() %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|title                                |description                                                                                                                                              |parent |child |\n|:------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------|:------|:-----|\n|Heidi, bienvenida a casa             |Inspired by the classic novel, this telenovela follows Heidi, who leaves her happy life in the mountains behind when her aunt takes her to the big city. |people |aunt  |\n|Hotel Transylvania                   |With her dad away, Mavis is so ready for adventure – if strict Aunt Lydia doesn't stop her first. Set four years before the \"Hotel Transylvania\" film.   |people |aunt  |\n|Judy Moody and the Not Bummer Summer |In this family film, never-dull third-grader Judy Moody embarks on a summer adventure with her brother, Stink, and always-up-for-fun Aunt Opal.          |people |aunt  |\n|Rip Tide                             |Following an embarrassing viral video, a New York model decides to escape from her suffocating existence by visiting her faraway aunt in Australia.      |people |aunt  |\n|I Am Kalam                           |An intelligent boy born into poverty befriends the son of a once noble family and is inspired by the life of India's president to pursue an education.   |events |birth |\n|If I were an Animal                  |Curious kids Emma and her big brother Tim observe different animals as they make their way through various life milestones, from birth to adulthood.     |events |birth |\n:::\n:::\n\n\n\n## Summarize\n\nTo simplify things, let's take all of the parent and child tags assigned to each movie and bring them together into a comma separated list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_groups <- tv_groups %>%\n              filter(!is.na(parent)) %>%\n              group_by(show_id, type, title, country, release_year, description) %>%\n              summarize(parent_nodes = paste(parent %>% unique %>% sort, collapse = \", \"),\n                        child_nodes = paste(child %>% unique %>% sort, collapse = \", \"),\n                        .groups = \"drop\")\n  \n# View groups\ntv_groups %>%\n  select(title, description, parent_nodes, child_nodes) %>%\n  arrange(-nchar(child_nodes)) %>%\n  head() %>%\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|title                                |description                                                                                                                                                                                                                                         |parent_nodes   |child_nodes                             |\n|:------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------|:---------------------------------------|\n|Snow Day                             |When a snow day shuts down the whole town, the Wheeler family cuts loose. Hal makes a play for the most popular girl in his school, 10-year-old Natalie takes on the dreaded snowplow man, and Dad gets into a showdown with a rival meteorologist. |people, places |family, father, girl, man, school, town |\n|The Haunted Hathaways                |Single mom Michelle Hathaway and her daughters find that they share their New Orleans home with the ghosts of single dad Ray Preston and his two sons.                                                                                              |people, places |daughter, father, home, mother, son     |\n|Riding Faith                         |Following her father's death, a young woman struggles to help her mother keep the family ranch afloat while preserving a special bond with her horse.                                                                                               |events, people |death, family, mother, woman            |\n|The Breadwinner                      |A courageous 11-year-old Afghan girl disguises herself as a boy and takes on odd jobs to provide for her family when her father is arrested.                                                                                                        |people         |boy, family, father, girl               |\n|Elf Pets: A Fox Cub’s Christmas Tale |An elite team of elves – and their furry fox cub friends – help bring the Christmas spirit to a boy whose mom may not make it home for the holidays.                                                                                                |people, places |boy, home, mother, team                 |\n|I Am Kalam                           |An intelligent boy born into poverty befriends the son of a once noble family and is inspired by the life of India's president to pursue an education.                                                                                              |events, people |birth, boy, family, son                 |\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}