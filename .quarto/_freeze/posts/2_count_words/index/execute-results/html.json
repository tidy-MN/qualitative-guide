{
  "hash": "831d93f6ca00a7dd491a30255e60dcf1",
  "result": {
    "markdown": "---\ntitle: \"2 — Count words\"\ndate: \"2024-01-02\"\ndate-modified: last-modified\nimage: \"two.jpg\"\nformat:\n  html:\n    toc: true\n    warning: false\n    message: false\n    fig-width: 2\ntbl-colwidths: [25,75]\ncategories: [count, words, terms, tokens]\nfilters:\n  - line-highlight\n---\n\n\n\n## Load the data\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_af029442598b905bfaaf5e8419733105'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ntv_ratings <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv')\n```\n:::\n\n\n\n## Count totals in each group or category\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ntype_count <- tv_ratings %>%\n              count(type) # type can be any column in the data\n\ntype_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  type        n\n  <chr>   <int>\n1 Movie    5377\n2 TV Show  2410\n```\n:::\n:::\n\n\n\n## Count totals by release year for each type\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_type_count <- tv_ratings %>%\n                   count(release_year, type) # Add multiple column names\n\nyear_type_count %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  release_year type        n\n         <dbl> <chr>   <int>\n1         1925 TV Show     1\n2         1942 Movie       2\n3         1943 Movie       3\n4         1944 Movie       3\n5         1945 Movie       3\n6         1946 Movie       1\n```\n:::\n:::\n\n\n\n## Add results to a wide format table with totals\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n\ntv_tabyl <- tv_ratings %>%\n            tabyl(release_year, type) %>%\n            adorn_totals() \n\ntv_tabyl %>% head() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n release_year Movie TV Show\n         1925     0       1\n         1942     2       0\n         1943     3       0\n         1944     3       0\n         1945     3       0\n         1946     1       1\n```\n:::\n:::\n\n\n\n## Rank occurence of words\n\n> `tokens` = words or phrases\n\nTop **10** words in the genre column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytext)\n\ngenre_count <- tv_ratings %>%\n               unnest_tokens(word, listed_in) %>%\n               count(word, sort = TRUE)\n\ngenre_count %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   word              n\n   <chr>         <int>\n 1 movies         4989\n 2 tv             4972\n 3 international  3636\n 4 dramas         2810\n 5 shows          2612\n 6 comedies       1996\n 7 action          871\n 8 adventure       871\n 9 romantic        864\n10 documentaries   786\n```\n:::\n:::\n\n\n\n## Additional token options\n\n::: {.panel-tabset}\n\n### Count 2-word phrases\n\n\n::: {.cell source-line-numbers='2'}\n\n```{.r .cell-code}\ngenre_count <- tv_ratings %>%\n               unnest_ngrams(word, listed_in, n = 2) %>%\n               count(word, sort = TRUE) \n\ngenre_count %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   word                     n\n   <chr>                <int>\n 1 tv shows              2560\n 2 international movies  2437\n 3 international tv      1199\n 4 dramas international  1071\n 5 action adventure       871\n 6 shows tv               862\n 7 <NA>                   727\n 8 tv dramas              704\n 9 independent movies     673\n10 children family        532\n```\n:::\n:::\n\n\n### Split phrases separated by a comma\n\nSince multiple genres are separated by a comma, we can treat each phrase before and after a comma as a single genre or token.\n\n\n::: {.cell source-line-numbers='2'}\n\n```{.r .cell-code}\ngenre_count <- tv_ratings %>%\n               unnest_regex(word, listed_in, pattern = \", \") %>%\n               count(word, sort = TRUE) \n\ngenre_count %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   word                         n\n   <chr>                    <int>\n 1 international movies      2437\n 2 dramas                    2106\n 3 comedies                  1471\n 4 international tv shows    1199\n 5 documentaries              786\n 6 action & adventure         721\n 7 tv dramas                  704\n 8 independent movies         673\n 9 children & family movies   532\n10 romantic movies            531\n```\n:::\n:::\n\n\n:::\n\n## Exclude vanilla stop words\n\n> `stop words` = Common words or phrases you don't want to include, such as `the`, `of`, and `to`.\n\nCreate a list of the default stop words.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexclude <- get_stopwords()$word\n\nexclude %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"i\"      \"me\"     \"my\"     \"myself\" \"we\"     \"our\"   \n```\n:::\n:::\n\n\n\nFirst, let's count the occurrence of all words in the show descriptions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_count <- tv_ratings %>%\n              unnest_tokens(word, description) %>%\n              count(word, sort = TRUE) \n\nword_count %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   word      n\n   <chr> <int>\n 1 a     10152\n 2 the    7226\n 3 to     5701\n 4 and    5629\n 5 of     4731\n 6 in     3920\n 7 his    3020\n 8 with   1976\n 9 her    1884\n10 an     1728\n```\n:::\n:::\n\n\n\nNow we'll exclude the stop words from the list with `filter()`.\n\n::: {.cell source-line-numbers='3'}\n\n```{.r .cell-code}\nword_count <- tv_ratings %>%\n              unnest_tokens(word, description) %>%\n              filter(!word %in% exclude) %>%\n              count(word, sort = TRUE) \n\nword_count %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   word        n\n   <chr>   <int>\n 1 life      746\n 2 young     655\n 3 new       613\n 4 family    497\n 5 man       464\n 6 world     453\n 7 love      447\n 8 two       443\n 9 woman     402\n10 friends   383\n```\n:::\n:::\n\n\n## Additional stop word options\n\n::: {.panel-tabset}\n\n### Exclude additional words\n\n\n::: {.cell source-line-numbers='1-4'}\n\n```{.r .cell-code}\nexclude <- c(get_stopwords()$word,\n              \"new\",\n              \"series\",\n              \"one\",\n              \"two\",\n              \"documentary\")\n\nword_count <- tv_ratings %>%\n              unnest_tokens(word, description) %>%\n              filter(!word %in% exclude) %>%\n              count(word, sort = TRUE) \n\nword_count %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   word        n\n   <chr>   <int>\n 1 life      746\n 2 young     655\n 3 family    497\n 4 man       464\n 5 world     453\n 6 love      447\n 7 woman     402\n 8 friends   383\n 9 must      332\n10 find      305\n```\n:::\n:::\n\n\n\n### Keep some words\n\n\n::: {.cell source-line-numbers='3-5'}\n\n```{.r .cell-code}\nexclude <- get_stopwords()$word\n\nkeep <- c(\"when\", \"while\", \"they\")\n\nexclude <- exclude[!exclude %in% keep]\n\nword_count <- tv_ratings %>%\n              unnest_tokens(word, description) %>%\n              filter(!word %in% exclude) %>%\n              count(word, sort = TRUE) \n\nword_count %>% head(14)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   word        n\n   <chr>   <int>\n 1 when     1325\n 2 life      746\n 3 young     655\n 4 new       613\n 5 family    497\n 6 man       464\n 7 they      456\n 8 world     453\n 9 love      447\n10 two       443\n11 woman     402\n12 friends   383\n13 series    358\n14 while     339\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}